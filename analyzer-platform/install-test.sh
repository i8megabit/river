#!/bin/bash

# ========================================
# –°–∫—Ä–∏–ø—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤–µ–±-–ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
# –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—É—é —É—Å—Ç–∞–Ω–æ–≤–∫—É —Å –Ω—É–ª—è
# ========================================

set -e  # –í—ã—Ö–æ–¥ –ø—Ä–∏ –ª—é–±–æ–π –æ—à–∏–±–∫–µ

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –û–°
detect_os() {
    if [[ "$OSTYPE" == "linux-gnu"* ]]; then
        echo "linux"
    elif [[ "$OSTYPE" == "darwin"* ]]; then
        echo "macos"
    else
        echo "unknown"
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker
check_docker() {
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ Docker..."
    
    if ! command -v docker &> /dev/null; then
        log_error "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        exit 1
    fi
    
    if ! docker info &> /dev/null; then
        log_error "Docker –Ω–µ –∑–∞–ø—É—â–µ–Ω! –ó–∞–ø—É—Å—Ç–∏—Ç–µ Docker –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        exit 1
    fi
    
    log_success "Docker –¥–æ—Å—Ç—É–ø–µ–Ω"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker Compose
check_docker_compose() {
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ Docker Compose..."
    
    if docker compose version &> /dev/null; then
        DOCKER_COMPOSE_CMD="docker compose"
        log_success "Docker Compose (–≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π) –¥–æ—Å—Ç—É–ø–µ–Ω"
    elif command -v docker-compose &> /dev/null; then
        DOCKER_COMPOSE_CMD="docker-compose"
        log_success "Docker Compose (–æ—Ç–¥–µ–ª—å–Ω—ã–π) –¥–æ—Å—Ç—É–ø–µ–Ω"
    else
        log_error "Docker Compose –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker Compose –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        exit 1
    fi
}

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
generate_env() {
    log_info "–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö –ø–∞—Ä–æ–ª–µ–π
    POSTGRES_PASSWORD=$(openssl rand -base64 32 | tr -d "=+/" | cut -c1-25)
    SECRET_KEY=$(openssl rand -base64 48 | tr -d "=+/" | cut -c1-64)
    
    cat > .env << EOF
# ========================================
# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
# –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ $(date)
# ========================================

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö PostgreSQL
POSTGRES_DB=analyzer_db
POSTGRES_USER=analyzer_user
POSTGRES_PASSWORD=${POSTGRES_PASSWORD}

# –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
SECRET_KEY=${SECRET_KEY}
DEBUG=true
LOG_LEVEL=DEBUG

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
ENVIRONMENT=test
EOF
    
    log_success "–§–∞–π–ª .env —Å–æ–∑–¥–∞–Ω —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º–∏ –ø–∞—Ä–æ–ª—è–º–∏"
}

# –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
cleanup_previous() {
    log_info "–û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
    
    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    if $DOCKER_COMPOSE_CMD -f docker-compose.test.yml ps -q 2>/dev/null | grep -q .; then
        log_info "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
        $DOCKER_COMPOSE_CMD -f docker-compose.test.yml down --volumes --remove-orphans 2>/dev/null || true
    fi
    
    # –£–¥–∞–ª–µ–Ω–∏–µ –æ–±—Ä–∞–∑–æ–≤
    log_info "–£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –æ–±—Ä–∞–∑–æ–≤..."
    docker rmi analyzer-backend-test:latest 2>/dev/null || true
    docker rmi analyzer-frontend-test:latest 2>/dev/null || true
    
    # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    if [ -d "data" ]; then
        log_info "–û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö..."
        rm -rf data/
    fi
    
    if [ -d "logs" ]; then
        log_info "–û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤..."
        rm -rf logs/
    fi
    
    log_success "–ü—Ä–µ–¥—ã–¥—É—â–µ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –æ—á–∏—â–µ–Ω–æ"
}

# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
create_directories() {
    log_info "–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π..."
    
    mkdir -p data/postgres
    mkdir -p data/redis
    mkdir -p data/uploads
    mkdir -p logs
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ø—Ä–∞–≤
    OS=$(detect_os)
    if [ "$OS" = "linux" ]; then
        chmod 755 data/postgres
        chmod 755 data/redis
        chmod 755 data/uploads
        chmod 755 logs
    fi
    
    log_success "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã"
}

# –ó–∞–ø—É—Å–∫ —Å–ª—É–∂–±
deploy_services() {
    log_info "–ó–∞–ø—É—Å–∫ —Å–ª—É–∂–±..."
    
    # –°–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–æ–≤
    log_info "–°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–æ–≤..."
    $DOCKER_COMPOSE_CMD -f docker-compose.test.yml build --no-cache
    
    # –ó–∞–ø—É—Å–∫ –≤ detached —Ä–µ–∂–∏–º–µ
    log_info "–ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
    $DOCKER_COMPOSE_CMD -f docker-compose.test.yml up -d
    
    log_success "–°–ª—É–∂–±—ã –∑–∞–ø—É—â–µ–Ω—ã"
}

# –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–ª—É–∂–±
wait_for_services() {
    log_info "–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–ª—É–∂–±..."
    
    local max_attempts=60
    local attempt=1
    
    while [ $attempt -le $max_attempts ]; do
        if curl -s http://localhost:18000/health >/dev/null 2>&1; then
            log_success "Backend –≥–æ—Ç–æ–≤"
            break
        fi
        
        if [ $attempt -eq $max_attempts ]; then
            log_error "Backend –Ω–µ –≥–æ—Ç–æ–≤ –ø–æ—Å–ª–µ $max_attempts –ø–æ–ø—ã—Ç–æ–∫"
            show_logs
            exit 1
        fi
        
        log_info "–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ backend ($attempt/$max_attempts)..."
        sleep 5
        ((attempt++))
    done
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ frontend
    if curl -s http://localhost:8080 >/dev/null 2>&1; then
        log_success "Frontend –≥–æ—Ç–æ–≤"
    else
        log_warning "Frontend –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ PostgreSQL
    if $DOCKER_COMPOSE_CMD -f docker-compose.test.yml exec -T postgres pg_isready -U analyzer_user >/dev/null 2>&1; then
        log_success "PostgreSQL –≥–æ—Ç–æ–≤"
    else
        log_warning "PostgreSQL –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Redis
    if $DOCKER_COMPOSE_CMD -f docker-compose.test.yml exec -T redis redis-cli ping >/dev/null 2>&1; then
        log_success "Redis –≥–æ—Ç–æ–≤"
    else
        log_warning "Redis –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    fi
}

# –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
show_logs() {
    log_error "–ü–æ–∫–∞–∑—ã–≤–∞—é –ª–æ–≥–∏ —Å–ª—É–∂–± –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:"
    echo "=================================="
    echo "Backend –ª–æ–≥–∏:"
    $DOCKER_COMPOSE_CMD -f docker-compose.test.yml logs --tail=20 backend
    echo "=================================="
}

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API
test_api() {
    log_info "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API..."
    
    # –¢–µ—Å—Ç health endpoint
    if ! curl -s http://localhost:18000/health | grep -q "healthy"; then
        log_error "Health check –Ω–µ –ø—Ä–æ—à–µ–ª"
        return 1
    fi
    
    # –¢–µ—Å—Ç —Å–ø–∏—Å–∫–∞ –æ—Ç—á–µ—Ç–æ–≤
    if ! curl -s http://localhost:18000/api/v1/reports | grep -q "reports"; then
        log_error "API —Å–ø–∏—Å–∫–∞ –æ—Ç—á–µ—Ç–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        return 1
    fi
    
    log_success "API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
}

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞
upload_test_report() {
    log_info "–ü–æ–∏—Å–∫ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞..."
    
    # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ HTML –æ—Ç—á–µ—Ç—ã –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–µ
    cd ../
    local report_file
    report_file=$(find . -maxdepth 1 -name "*_report_analyzer.html" -type f 2>/dev/null | head -1)
    
    if [ -n "$report_file" ] && [ -f "$report_file" ]; then
        log_info "–ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ—Ç—á–µ—Ç: $report_file"
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç—á–µ—Ç–∞ —á–µ—Ä–µ–∑ API
        cd analyzer-platform
        if curl -s -X POST "http://localhost:18000/api/v1/reports/upload" \
             -F "file=@../$report_file" | grep -q "success\|report_id"; then
            log_success "–¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ"
        else
            log_warning "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç"
        fi
    else
        log_warning "HTML –æ—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–µ"
        log_info "–î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–∑–¥–∞–π—Ç–µ –æ—Ç—á–µ—Ç –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–º –∏–ª–∏ –ø–æ–º–µ—Å—Ç–∏—Ç–µ –≥–æ—Ç–æ–≤—ã–π HTML —Ñ–∞–π–ª –≤ –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É"
    fi
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é analyzer-platform
    cd "$(dirname "$0")"
}

# –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–µ
show_access_info() {
    log_success "=============================================="
    log_success "–£–°–¢–ê–ù–û–í–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!"
    log_success "=============================================="
    echo ""
    log_info "–î–æ—Å—Ç—É–ø –∫ —Å–∏—Å—Ç–µ–º–µ:"
    log_info "üåê –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: http://localhost:8080"
    log_info "üì° API Backend:   http://localhost:18000"
    log_info "üìñ API Docs:      http://localhost:18000/docs"
    log_info "‚ù§Ô∏è  Health Check: http://localhost:18000/health"
    echo ""
    log_info "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:"
    log_info "üêò PostgreSQL:    localhost:15432"
    log_info "üì¶ Redis:         localhost:16379"
    echo ""
    log_info "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:"
    log_info "üîß –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å:    $DOCKER_COMPOSE_CMD -f docker-compose.test.yml down"
    log_info "üìä –õ–æ–≥–∏:          $DOCKER_COMPOSE_CMD -f docker-compose.test.yml logs -f"
    log_info "üîç –°—Ç–∞—Ç—É—Å:        $DOCKER_COMPOSE_CMD -f docker-compose.test.yml ps"
    echo ""
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    log_info "=========================================="
    log_info "–£–°–¢–ê–ù–û–í–ö–ê –¢–ï–°–¢–û–í–û–ì–û –û–ö–†–£–ñ–ï–ù–ò–Ø –ê–ù–ê–õ–ò–ó–ê–¢–û–†–ê"
    log_info "=========================================="
    
    # –ü–µ—Ä–µ—Ö–æ–¥ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    cd "$(dirname "$0")"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã
    check_docker
    check_docker_compose
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞
    generate_env
    cleanup_previous
    create_directories
    
    # –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ
    deploy_services
    wait_for_services
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    test_api
    upload_test_report
    
    # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
    show_access_info
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
trap 'log_error "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"; exit 1' SIGINT SIGTERM

# –ó–∞–ø—É—Å–∫
main "$@" 