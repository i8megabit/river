# ========================================
# Docker Compose для продакшен деплоя веб-платформы анализатора
# ========================================

version: '3.8'

services:
  # ========================================
  # База данных PostgreSQL
  # ========================================
  postgres:
    image: postgres:15
    container_name: analyzer-postgres-prod-debian
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-analyzer_db}
      POSTGRES_USER: ${POSTGRES_USER:-analyzer_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_production_password}
      POSTGRES_INITDB_ARGS: "--auth-host=md5"
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - ./data/postgres:/var/lib/postgresql/data:rw
      - ./database/init:/docker-entrypoint-initdb.d:ro
    ports:
      - "127.0.0.1:5432:5432"
    networks:
      - analyzer-network
    command: postgres -c 'max_connections=200' -c 'shared_buffers=512MB' -c 'effective_cache_size=2GB'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-analyzer_user} -d ${POSTGRES_DB:-analyzer_db}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2'
        reservations:
          memory: 1G
          cpus: '1'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"

  # ========================================
  # Redis для кэширования
  # ========================================
  redis:
    image: redis:7-alpine
    container_name: analyzer-redis-prod-debian
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - ./data/redis:/data:rw
    ports:
      - "127.0.0.1:6379:6379"
    networks:
      - analyzer-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1'
        reservations:
          memory: 256M
          cpus: '0.5'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"

  # ========================================
  # FastAPI Backend
  # ========================================
  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile.debian-prod
      args:
        # Используем образы для сборки
        BASE_IMAGE: python:3.11-slim
        PIP_INDEX_URL: ${PIP_INDEX_URL:-https://___repository/pypi/simple}
        PIP_TRUSTED_HOST: ${PIP_TRUSTED_HOST:-""}
    image: analyzer-backend-prod-debian:${VERSION:-latest}
    container_name: analyzer-backend-prod-debian
    restart: unless-stopped
    environment:
      # Database
      POSTGRES_SERVER: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: ${POSTGRES_DB:-analyzer_db}
      POSTGRES_USER: ${POSTGRES_USER:-analyzer_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_production_password}
      
      # Redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      
      # Application
      ENVIRONMENT: production
      SECRET_KEY: ${SECRET_KEY:-your-super-secret-production-key}
      DEBUG: ${DEBUG:-false}
      
      # Server
      SERVER_HOST: 0.0.0.0
      SERVER_PORT: 8000
      
      # Logging
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      
      # Security
      ALLOWED_HOSTS: ${ALLOWED_HOSTS:-localhost,127.0.0.1}
      
      # Debian specific
      DEBIAN_FRONTEND: noninteractive
      APT_KEY_DONT_WARN_ON_DANGEROUS_USAGE: 1
    volumes:
      - ./data/uploads:/app/uploads:rw
      - ./logs:/app/logs:rw
    ports:
      - "127.0.0.1:8000:8000"
    networks:
      - analyzer-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2'
        reservations:
          memory: 1G
          cpus: '1'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"

  # ========================================
  # Frontend веб-интерфейс
  # ========================================
  frontend:
    build:
      context: .
      dockerfile: frontend/Dockerfile.debian-prod
      args:
        # Используем  nginx
        BASE_IMAGE: nginx:alpine
    image: analyzer-frontend-prod-debian:${VERSION:-latest}
    container_name: analyzer-frontend-prod-debian
    restart: unless-stopped
    volumes:
      - ./logs:/var/log/nginx:rw
      - ./config/nginx/ssl:/etc/nginx/ssl:ro  # SSL сертификаты
    ports:
      - "80:80"
      - "443:443"  # HTTPS в продакшне
    networks:
      - analyzer-network
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '1'
        reservations:
          memory: 128M
          cpus: '0.5'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"

  # ========================================
  # Мониторинг и метрики (опционально)
  # ========================================
  monitoring:
    image: prom/node-exporter:latest
    container_name: analyzer-monitoring-prod-debian
    restart: unless-stopped
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    ports:
      - "127.0.0.1:9100:9100"
    networks:
      - analyzer-network
    profiles:
      - monitoring
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ========================================
  # Backup Service
  # ========================================
  backup:
    image: postgres:15
    container_name: analyzer-backup-prod-debian
    restart: "no"
    environment:
      PGUSER: ${POSTGRES_USER:-analyzer_user}
      PGPASSWORD: ${POSTGRES_PASSWORD:-secure_production_password}
      PGHOST: postgres
      PGDATABASE: ${POSTGRES_DB:-analyzer_db}
    volumes:
      - ./data/backups:/backups:rw
    networks:
      - analyzer-network
    depends_on:
      postgres:
        condition: service_healthy
    command: >
      sh -c "
        echo 'Создание продакшн бэкапа базы данных (Debian)...'
        pg_dump -h postgres -U ${POSTGRES_USER:-analyzer_user} -d ${POSTGRES_DB:-analyzer_db} \
          > /backups/debian_backup_$$(date +%Y%m%d_%H%M%S).sql
        echo 'Debian продакшн бэкап создан успешно'
        # Удаляем бэкапы старше 30 дней в продакшне
        find /backups -name 'debian_backup_*.sql' -mtime +30 -delete
        echo 'Старые Debian бэкапы очищены'
      "
    profiles:
      - backup
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ========================================
  # Systemd integration для Debian (опционально)
  # ========================================
  systemd-logger:
    image: alpine:latest
    container_name: analyzer-systemd-logger-debian
    restart: unless-stopped
    command: >
      sh -c "
        apk add --no-cache rsyslog
        echo 'Debian systemd logger started'
        tail -f /dev/null
      "
    volumes:
      - /var/log:/host/var/log:ro
      - ./logs:/app/logs:rw
    networks:
      - analyzer-network
    profiles:
      - systemd
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"

# ========================================
# Networks
# ========================================
networks:
  analyzer-network:
    driver: bridge
    name: analyzer-prod-debian-network

# ========================================
# Secrets (для продакшена)
# ========================================
secrets:
  postgres_password:
    file: ./secrets/postgres_password.txt
  redis_password:
    file: ./secrets/redis_password.txt
  secret_key:
    file: ./secrets/secret_key.txt

# Именованные volumes для персистентности данных
volumes: {}  # Используем bind mounts для лучшего контроля 