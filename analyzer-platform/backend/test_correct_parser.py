#!/usr/bin/env python3
import asyncio
from services.html_parser import parse_analyzer_html_file

async def test():
    try:
        result = await parse_analyzer_html_file('uploads/test-report-correct.html')
        print('‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–æ—Ä—Ç–æ–≤
        ports = result.get("ports", {})
        tcp_ports = ports.get("tcp", [])
        udp_ports = ports.get("udp", [])
        
        print(f'TCP –ø–æ—Ä—Ç–æ–≤: {len(tcp_ports)}')
        print(f'UDP –ø–æ—Ä—Ç–æ–≤: {len(udp_ports)}')
        
        # –û—Ç–ª–∞–¥–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
        print('\nüîç –°—Ç—Ä—É–∫—Ç—É—Ä–∞ TCP –ø–æ—Ä—Ç–æ–≤:')
        for i, port in enumerate(tcp_ports):
            print(f'  {i}: {port} (—Ç–∏–ø: {type(port)})')
            if isinstance(port, dict):
                print(f'      –∫–ª—é—á–∏: {list(port.keys())}')
        
        print('\nüîç –°—Ç—Ä—É–∫—Ç—É—Ä–∞ UDP –ø–æ—Ä—Ç–æ–≤:')
        for i, port in enumerate(udp_ports[:3]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3
            print(f'  {i}: {port} (—Ç–∏–ø: {type(port)})')
            if isinstance(port, dict):
                print(f'      –∫–ª—é—á–∏: {list(port.keys())}')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        print('\nüìä –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:')
        print(f'- –•–æ—Å—Ç: {result.get("hostname", "–Ω–µ –Ω–∞–π–¥–µ–Ω")}')
        print(f'- –û–°: {result.get("os_name", "–Ω–µ –Ω–∞–π–¥–µ–Ω–∞")}')
        print(f'- –í—Å–µ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {result.get("total_connections", 0)}')
        print(f'- TCP –ø–æ—Ä—Ç–æ–≤: {result.get("tcp_ports_count", 0)}')
        print(f'- UDP –ø–æ—Ä—Ç–æ–≤: {result.get("udp_ports_count", 0)}')
        
    except Exception as e:
        print(f'‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}')
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(test()) 