#!/usr/bin/env python3
"""
–ú–∏–≥—Ä–∞—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª–µ–π tcp_connections, udp_connections, icmp_connections
"""

import asyncio
import asyncpg
from core.config import get_settings

settings = get_settings()

async def apply_migration():
    """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    print("üîÑ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π –¥–ª—è –ø–æ–ª–µ–π —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π...")
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = await asyncpg.connect(
            host=settings.DATABASE_HOST,
            port=settings.DATABASE_PORT,
            user=settings.DATABASE_USER,
            password=settings.DATABASE_PASSWORD,
            database=settings.DATABASE_NAME
        )
        
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É—é—Ç –ª–∏ –Ω–æ–≤—ã–µ –ø–æ–ª—è
        check_columns_query = """
        SELECT column_name 
        FROM information_schema.columns 
        WHERE table_name = 'system_reports' 
        AND column_name IN ('tcp_connections', 'udp_connections', 'icmp_connections');
        """
        
        existing_columns = await conn.fetch(check_columns_query)
        existing_column_names = [row['column_name'] for row in existing_columns]
        
        print(f"üîç –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è: {existing_column_names}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è
        migrations = []
        
        if 'tcp_connections' not in existing_column_names:
            migrations.append("ALTER TABLE system_reports ADD COLUMN tcp_connections INTEGER DEFAULT 0;")
            
        if 'udp_connections' not in existing_column_names:
            migrations.append("ALTER TABLE system_reports ADD COLUMN udp_connections INTEGER DEFAULT 0;")
            
        if 'icmp_connections' not in existing_column_names:
            migrations.append("ALTER TABLE system_reports ADD COLUMN icmp_connections INTEGER DEFAULT 0;")
        
        if migrations:
            print(f"üìù –ü—Ä–∏–º–µ–Ω—è–µ–º {len(migrations)} –º–∏–≥—Ä–∞—Ü–∏–π...")
            
            for i, migration in enumerate(migrations, 1):
                print(f"üîÑ –ú–∏–≥—Ä–∞—Ü–∏—è {i}/{len(migrations)}: {migration}")
                await conn.execute(migration)
                print(f"‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è {i} –ø—Ä–∏–º–µ–Ω–µ–Ω–∞")
        else:
            print("‚úÖ –í—Å–µ –ø–æ–ª—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç, –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏, –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ raw_data
        print("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π...")
        
        update_query = """
        UPDATE system_reports 
        SET 
            tcp_connections = COALESCE((raw_data->>'tcp_connections')::integer, 0),
            udp_connections = COALESCE((raw_data->>'udp_connections')::integer, 0),
            icmp_connections = COALESCE((raw_data->>'icmp_connections')::integer, 0)
        WHERE raw_data IS NOT NULL 
        AND (tcp_connections = 0 OR udp_connections = 0 OR icmp_connections = 0);
        """
        
        result = await conn.execute(update_query)
        print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {result}")
        
        await conn.close()
        print("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π: {e}")
        raise

if __name__ == "__main__":
    asyncio.run(apply_migration()) 