# ========================================
# Dockerfile для FastAPI Backend (Production - Debian/Ubuntu)
# Оптимизирован для Debian/Ubuntu продакшен сред
# ========================================

# Принимаем аргументы для образов
ARG BASE_IMAGE=python:3.11-slim
ARG PIP_INDEX_URL=https://___repository/pypi/simple
ARG PIP_TRUSTED_HOST=""

# ========================================
# Базовый образ с зависимостями
# ========================================
FROM ${BASE_IMAGE} as base

# Метаданные
LABEL maintainer="Mikhail Eberil"
LABEL version="v1.0.0"
LABEL description="Веб-платформа анализатора системы - Debian Production Build"
LABEL environment="production"
LABEL os="debian"
LABEL registry=" "

# Переменные окружения для Debian продакшена
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    PIP_INDEX_URL=${PIP_INDEX_URL} \
    PIP_TRUSTED_HOST=${PIP_TRUSTED_HOST} \
    DEBIAN_FRONTEND=noninteractive \
    APT_KEY_DONT_WARN_ON_DANGEROUS_USAGE=1 \
    ENVIRONMENT=production \
    TZ=Europe/Moscow

# Обновление apt и установка базовых зависимостей для Debian
RUN apt-get update && apt-get install -y --no-install-recommends \
    # Компиляторы и dev tools
    gcc \
    g++ \
    make \
    # Библиотеки для Python пакетов
    libpq-dev \
    libffi-dev \
    libssl-dev \
    # Системные утилиты
    curl \
    wget \
    ca-certificates \
    gnupg \
    lsb-release \
    # Локализация
    locales \
    # Утилиты для Debian
    apt-transport-https \
    software-properties-common \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Настройка локали для Debian
RUN echo "en_US.UTF-8 UTF-8" > /etc/locale.gen && \
    echo "ru_RU.UTF-8 UTF-8" >> /etc/locale.gen && \
    locale-gen && \
    update-locale LANG=en_US.UTF-8

ENV LANG=en_US.UTF-8 \
    LC_ALL=en_US.UTF-8

# Конфигурация pip для работы с  Artifactory
RUN mkdir -p /root/.pip && \
    echo "[global]" > /root/.pip/pip.conf && \
    echo "index-url = ${PIP_INDEX_URL}" >> /root/.pip/pip.conf && \
    echo "trusted-host = ${PIP_TRUSTED_HOST}" >> /root/.pip/pip.conf && \
    echo "timeout = 60" >> /root/.pip/pip.conf

# ========================================
# Образ для зависимостей
# ========================================
FROM base as dependencies

# Обновление pip из  репозитория
RUN pip install --upgrade pip setuptools wheel

# Копирование файла зависимостей
COPY requirements.txt /tmp/requirements.txt

# Установка Python зависимостей из  PyPI
RUN pip install --no-cache-dir -r /tmp/requirements.txt

# Дополнительные пакеты для Debian продакшена
RUN pip install --no-cache-dir \
    gunicorn \
    uvloop \
    httptools

# ========================================
# Продакшен образ
# ========================================
FROM base as production

# Создание пользователя для безопасности (Debian стиль)
RUN groupadd -r analyzer --gid=1000 && \
    useradd -r -g analyzer --uid=1000 --home-dir=/app --shell=/bin/bash analyzer

# Создание рабочей директории
WORKDIR /app

# Копирование установленных зависимостей
COPY --from=dependencies /usr/local/lib/python3.11/site-packages/ /usr/local/lib/python3.11/site-packages/
COPY --from=dependencies /usr/local/bin/ /usr/local/bin/

# Создание директорий с правильными правами для Debian
RUN mkdir -p /app/uploads /app/logs /app/temp /app/cache && \
    chown -R analyzer:analyzer /app && \
    chmod 755 /app/uploads /app/logs /app/temp /app/cache

# Настройка логирования для Debian
RUN mkdir -p /var/log/analyzer && \
    chown analyzer:analyzer /var/log/analyzer && \
    chmod 755 /var/log/analyzer

# Копирование исходного кода
COPY --chown=analyzer:analyzer . /app/

# Установка прав доступа для продакшен скриптов
RUN find /app -name "*.sh" -exec chmod +x {} \; || echo "No shell scripts found"

# Создание конфигурационного файла для systemd integration
RUN echo '[Unit]' > /app/analyzer.service && \
    echo 'Description=Analyzer Backend Service' >> /app/analyzer.service && \
    echo 'After=network.target postgresql.service' >> /app/analyzer.service && \
    echo '' >> /app/analyzer.service && \
    echo '[Service]' >> /app/analyzer.service && \
    echo 'Type=exec' >> /app/analyzer.service && \
    echo 'User=analyzer' >> /app/analyzer.service && \
    echo 'WorkingDirectory=/app' >> /app/analyzer.service && \
    echo 'ExecStart=/usr/local/bin/uvicorn main:app --host 0.0.0.0 --port 8000 --workers 4' >> /app/analyzer.service && \
    echo 'Restart=always' >> /app/analyzer.service && \
    echo '' >> /app/analyzer.service && \
    echo '[Install]' >> /app/analyzer.service && \
    echo 'WantedBy=multi-user.target' >> /app/analyzer.service

# Переключение на пользователя (важно для безопасности в продакшне)
USER analyzer

# Проверка работоспособности с более строгими параметрами для продакшена
HEALTHCHECK --interval=15s --timeout=5s --start-period=30s --retries=5 \
    CMD curl -f http://localhost:8000/health || exit 1

# Экспорт порта
EXPOSE 8000

# Команда запуска для Debian продакшена
CMD ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000", "--workers", "4", "--worker-class", "uvicorn.workers.UvicornWorker", "--access-log", "--log-level", "info"]

# ========================================
# Образ для staging (промежуточная среда)
# ========================================
FROM production as staging

# Дополнительные инструменты для staging
USER root

RUN pip install --no-cache-dir \
    pytest \
    pytest-asyncio \
    pytest-cov \
    black \
    flake8 \
    mypy

USER analyzer

# Команда для staging с меньшим количеством воркеров
CMD ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000", "--workers", "2", "--reload"]

# ========================================
# Образ для разработки на Debian
# ========================================
FROM staging as development

USER root

# Дополнительные dev инструменты для Debian
RUN apt-get update && apt-get install -y --no-install-recommends \
    vim \
    nano \
    htop \
    tree \
    git \
    iputils-ping \
    net-tools \
    && rm -rf /var/lib/apt/lists/*

RUN pip install --no-cache-dir \
    ipython \
    jupyter \
    debugpy \
    pdbpp

USER analyzer

# Команда для разработки с debug возможностями
CMD ["python", "-m", "debugpy", "--listen", "0.0.0.0:5678", "--wait-for-client", "-m", "uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"] 