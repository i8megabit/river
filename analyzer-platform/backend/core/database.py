#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö PostgreSQL
"""

import logging
from typing import AsyncGenerator, Optional
from contextlib import asynccontextmanager

from sqlalchemy.ext.asyncio import (
    AsyncSession, 
    create_async_engine, 
    async_sessionmaker,
    AsyncEngine
)
from sqlalchemy.orm import DeclarativeBase
from sqlalchemy import text

from core.config import get_settings

logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –¥–≤–∏–∂–∫–∞ –∏ —Å–µ—Å—Å–∏–∏
async_engine: Optional[AsyncEngine] = None
async_session_factory: Optional[async_sessionmaker[AsyncSession]] = None


class Base(DeclarativeBase):
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π SQLAlchemy"""
    pass


async def create_database_engine() -> AsyncEngine:
    """
    –°–æ–∑–¥–∞–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –¥–≤–∏–∂–æ–∫ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    """
    settings = get_settings()
    
    # –°–æ–∑–¥–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –¥–≤–∏–∂–æ–∫
    engine = create_async_engine(
        settings.database_url,
        echo=settings.DEBUG,
        future=True,
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –¥–ª—è asyncio
        pool_size=settings.DB_POOL_SIZE,
        max_overflow=settings.DB_POOL_MAX_OVERFLOW,
        pool_timeout=settings.DB_POOL_TIMEOUT,
        pool_recycle=settings.DB_POOL_RECYCLE,
        pool_pre_ping=True,
    )
    
    return engine


async def init_db() -> None:
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    """
    global async_engine, async_session_factory
    
    try:
        # –°–æ–∑–¥–∞–µ–º –¥–≤–∏–∂–æ–∫
        async_engine = await create_database_engine()
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–±—Ä–∏–∫—É —Å–µ—Å—Å–∏–π
        async_session_factory = async_sessionmaker(
            bind=async_engine,
            class_=AsyncSession,
            expire_on_commit=False,
            autoflush=True,
            autocommit=False
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        async with async_engine.begin() as conn:
            await conn.execute(text("SELECT 1"))
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
        async with async_engine.begin() as conn:
            await conn.run_sync(Base.metadata.create_all)
        
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö PostgreSQL –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        print("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã/–ø—Ä–æ–≤–µ—Ä–µ–Ω—ã")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
        raise


async def close_db() -> None:
    """
    –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    """
    global async_engine
    
    if async_engine:
        await async_engine.dispose()
        print("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –∑–∞–∫—Ä—ã—Ç–æ")


async def get_db_session() -> AsyncGenerator[AsyncSession, None]:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è dependency injection
    """
    if not async_session_factory:
        raise RuntimeError("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    async with async_session_factory() as session:
        try:
            yield session
        except Exception:
            await session.rollback()
            raise
        finally:
            await session.close()


async def get_db_health() -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    """
    try:
        if not async_engine:
            return False
        
        async with async_engine.begin() as conn:
            await conn.execute(text("SELECT 1"))
        
        return True
    except Exception as e:
        print(f"‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å –ë–î: {e}")
        return False


@asynccontextmanager
async def get_db_transaction():
    """
    –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    """
    if not async_session_factory:
        raise RuntimeError("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    async with async_session_factory() as session:
        async with session.begin():
            try:
                yield session
            except Exception:
                await session.rollback()
                raise


async def get_db_info() -> dict:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    """
    try:
        if not async_engine:
            return {"status": "not_initialized"}
        
        async with async_engine.begin() as conn:
            # –í–µ—Ä—Å–∏—è PostgreSQL
            version_result = await conn.execute(text("SELECT version()"))
            version = version_result.fetchone()[0]
            
            # –†–∞–∑–º–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            size_result = await conn.execute(
                text("SELECT pg_size_pretty(pg_database_size(current_database()))")
            )
            database_size = size_result.fetchone()[0]
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
            connections_result = await conn.execute(
                text("SELECT count(*) FROM pg_stat_activity WHERE state = 'active'")
            )
            active_connections = connections_result.fetchone()[0]
            
            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
            total_connections_result = await conn.execute(
                text("SELECT count(*) FROM pg_stat_activity")
            )
            total_connections = total_connections_result.fetchone()[0]
            
            return {
                "status": "healthy",
                "version": version,
                "database_size": database_size,
                "active_connections": active_connections,
                "total_connections": total_connections,
                "pool_size": settings.DB_POOL_SIZE,
                "max_overflow": settings.DB_POOL_MAX_OVERFLOW
            }
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ë–î: {e}")
        return {"status": "error", "error": str(e)}


async def execute_migration(migration_sql: str) -> bool:
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç SQL –º–∏–≥—Ä–∞—Ü–∏—é
    """
    try:
        if not async_engine:
            raise RuntimeError("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
        async with async_engine.begin() as conn:
            await conn.execute(text(migration_sql))
            await conn.commit()
        
        logger.info("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        return False


async def cleanup_old_data(days: int = 90) -> int:
    """
    –û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ (—Å—Ç–∞—Ä—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π)
    """
    try:
        if not async_session_factory:
            raise RuntimeError("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
        from models.report import SystemReport
        from datetime import datetime, timedelta
        
        cutoff_date = datetime.utcnow() - timedelta(days=days)
        deleted_count = 0
        
        async with async_session_factory() as session:
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ—Ç—á–µ—Ç—ã (–∫–∞—Å–∫–∞–¥–Ω–æ —É–¥–∞–ª—è—Ç—Å—è —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
            result = await session.execute(
                text("""
                    DELETE FROM system_reports 
                    WHERE created_at < :cutoff_date
                    RETURNING id
                """),
                {"cutoff_date": cutoff_date}
            )
            
            deleted_rows = result.fetchall()
            deleted_count = len(deleted_rows)
            
            await session.commit()
        
        logger.info(f"üßπ –û—á–∏—â–µ–Ω–æ {deleted_count} —Å—Ç–∞—Ä—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ (—Å—Ç–∞—Ä—à–µ {days} –¥–Ω–µ–π)")
        return deleted_count
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        return 0


async def get_table_stats() -> dict:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–∞–±–ª–∏—Ü–∞–º
    """
    try:
        if not async_engine:
            return {}
        
        async with async_engine.begin() as conn:
            result = await conn.execute(text("""
                SELECT 
                    schemaname,
                    tablename,
                    n_tup_ins as inserts,
                    n_tup_upd as updates,
                    n_tup_del as deletes,
                    n_live_tup as live_tuples,
                    n_dead_tup as dead_tuples
                FROM pg_stat_user_tables 
                ORDER BY tablename
            """))
            
            stats = {}
            for row in result.fetchall():
                stats[row.tablename] = {
                    "schema": row.schemaname,
                    "inserts": row.inserts,
                    "updates": row.updates,
                    "deletes": row.deletes,
                    "live_tuples": row.live_tuples,
                    "dead_tuples": row.dead_tuples
                }
            
            return stats
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–∞–±–ª–∏—Ü: {e}")
        return {}


# Dependency –¥–ª—è FastAPI
async def get_db() -> AsyncGenerator[AsyncSession, None]:
    """
    FastAPI dependency –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –ë–î
    """
    async for session in get_db_session():
        yield session


if __name__ == "__main__":
    """
    –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    """
    async def test_db():
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î...")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        await init_db()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è
        health = await get_db_health()
        print(f"–ó–¥–æ—Ä–æ–≤—å–µ –ë–î: {'‚úÖ' if health else '‚ùå'}")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ë–î
        info = await get_db_info()
        print(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ë–î: {info}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–∞–±–ª–∏—Ü
        stats = await get_table_stats()
        print(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–∞–±–ª–∏—Ü: {len(stats)} —Ç–∞–±–ª–∏—Ü")
        
        # –ó–∞–∫—Ä—ã—Ç–∏–µ
        await close_db()
        print("‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω")
    
    asyncio.run(test_db()) 