#!/usr/bin/env python3
"""
–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
"""

import os
from functools import lru_cache
from typing import List, Optional, Any, Dict
from pathlib import Path

from pydantic_settings import BaseSettings
from pydantic import SecretStr


class Settings(BaseSettings):
    """
    –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    """
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    APP_NAME: str = "Analyzer Platform"
    APP_VERSION: str = "v0.0.1"
    ENVIRONMENT: str = "development"
    DEBUG: bool = True
    
    # API –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    API_V1_STR: str = "/api/v1"
    SECRET_KEY: SecretStr = SecretStr("your-super-secret-key-change-in-production")
    ACCESS_TOKEN_EXPIRE_MINUTES: int = 60 * 24 * 8  # 8 –¥–Ω–µ–π
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
    SERVER_HOST: str = "0.0.0.0"
    SERVER_PORT: int = 8000
    
    # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö PostgreSQL
    POSTGRES_SERVER: str = "localhost"
    POSTGRES_PORT: int = 5432
    POSTGRES_USER: str = "analyzer_user"
    POSTGRES_PASSWORD: SecretStr = SecretStr("analyzer_password")
    POSTGRES_DB: str = "analyzer_db"
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    DB_POOL_SIZE: int = 20
    DB_POOL_MAX_OVERFLOW: int = 30
    DB_POOL_TIMEOUT: int = 30
    DB_POOL_RECYCLE: int = 3600
    
    # Redis –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    REDIS_HOST: str = "localhost"
    REDIS_PORT: int = 6379
    REDIS_PASSWORD: Optional[SecretStr] = None
    REDIS_DB: int = 0
    REDIS_URL: Optional[str] = None
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
    CACHE_TTL: int = 3600  # 1 —á–∞—Å
    CACHE_PREFIX: str = "analyzer:"
    
    # –§–∞–π–ª–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    UPLOAD_DIR: str = "uploads"
    MAX_UPLOAD_SIZE: int = 100 * 1024 * 1024  # 100MB
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    LOG_LEVEL: str = "INFO"
    LOG_FILE: str = "logs/analyzer-platform.log"
    LOG_RETENTION_DAYS: int = 30
    LOG_MAX_SIZE: str = "10MB"
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    ENABLE_METRICS: bool = True
    METRICS_PATH: str = "/metrics"
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–º
    ANALYZER_REPORTS_DIR: str = "reports"
    AUTO_IMPORT_REPORTS: bool = True
    REPORT_CLEANUP_DAYS: int = 90
    
    @property
    def database_url(self) -> str:
        """–§–æ—Ä–º–∏—Ä—É–µ—Ç URL –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        password = self.POSTGRES_PASSWORD.get_secret_value()
        return f"postgresql+asyncpg://{self.POSTGRES_USER}:{password}@{self.POSTGRES_SERVER}:{self.POSTGRES_PORT}/{self.POSTGRES_DB}"
    
    @property
    def redis_url_computed(self) -> str:
        """–§–æ—Ä–º–∏—Ä—É–µ—Ç URL –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis"""
        if self.REDIS_URL:
            return self.REDIS_URL
        
        auth_part = ""
        if self.REDIS_PASSWORD:
            password = self.REDIS_PASSWORD.get_secret_value()
            auth_part = f":{password}@"
        
        return f"redis://{auth_part}{self.REDIS_HOST}:{self.REDIS_PORT}/{self.REDIS_DB}"
    
    @property
    def is_production(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–æ–º"""
        return self.ENVIRONMENT == "production"
    
    @property
    def is_development(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–∫—Ä—É–∂–µ–Ω–∏–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–æ–π"""
        return self.ENVIRONMENT == "development"
    
    class Config:
        """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Pydantic Settings"""
        env_file = ".env"
        env_file_encoding = "utf-8"
        case_sensitive = True


@lru_cache()
def get_settings() -> Settings:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (—Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º)
    
    Returns:
        Settings: –û–±—ä–µ–∫—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫
    """
    return Settings()


def create_directories():
    """–°–æ–∑–¥–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
    settings = get_settings()
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    directories = [
        settings.UPLOAD_DIR,
        Path(settings.LOG_FILE).parent,
        settings.ANALYZER_REPORTS_DIR
    ]
    
    for directory in directories:
        Path(directory).mkdir(parents=True, exist_ok=True)


if __name__ == "__main__":
    """
    –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    """
    settings = get_settings()
    print("üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–µ–±-–ø–ª–∞—Ç—Ñ–æ—Ä–º—ã:")
    print(f"   –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: {settings.APP_NAME} v{settings.APP_VERSION}")
    print(f"   –û–∫—Ä—É–∂–µ–Ω–∏–µ: {settings.ENVIRONMENT}")
    print(f"   –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {settings.POSTGRES_SERVER}:{settings.POSTGRES_PORT}/{settings.POSTGRES_DB}")
    print(f"   Redis: {settings.REDIS_HOST}:{settings.REDIS_PORT}")
    print(f"   –°–µ—Ä–≤–µ—Ä: {settings.SERVER_HOST}:{settings.SERVER_PORT}")
    print(f"   –õ–æ–≥–∏: {settings.LOG_FILE}")
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    create_directories() 