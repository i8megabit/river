#!/usr/bin/env python3
"""
–ì–ª–∞–≤–Ω–æ–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –≤–µ–±-–ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: PostgreSQL + Redis + FastAPI + Modern HTML/CSS/JS Frontend
"""

import os
import asyncio
from contextlib import asynccontextmanager
from fastapi import FastAPI, Request, Response
from fastapi.middleware.cors import CORSMiddleware
from fastapi.middleware.gzip import GZipMiddleware
from fastapi.middleware.trustedhost import TrustedHostMiddleware
from fastapi.responses import JSONResponse, FileResponse
from fastapi.staticfiles import StaticFiles
import uvicorn
from datetime import datetime
import logging

# –ò–º–ø–æ—Ä—Ç—ã –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –º–æ–¥—É–ª–µ–π
from core.config import get_settings
from core.database import init_db, close_db, get_db_health, get_table_stats
from core.redis_client import init_redis, close_redis, get_redis_health
from api.v1.main import api_router

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
settings = get_settings()


@asynccontextmanager
async def lifespan(app: FastAPI):
    """
    –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    """
    # Startup
    print("üöÄ –ó–∞–ø—É—Å–∫ –≤–µ–±-–ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    try:
        print("üîç [DEBUG] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î...")
        await init_db()
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö PostgreSQL –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ –ë–î
        print("üîç [DEBUG] –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î...")
        db_health = await get_db_health()
        print(f"üîç [DEBUG] –°—Ç–∞—Ç—É—Å –ë–î: {'‚úÖ –ó–¥–æ—Ä–æ–≤–∞—è' if db_health else '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞'}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã –≤ –ë–î
        try:
            table_stats = await get_table_stats()
            print(f"üîç [DEBUG] –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–∞–±–ª–∏—Ü –ë–î: {table_stats}")
        except Exception as table_error:
            print(f"‚ö†Ô∏è [DEBUG] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–∞–±–ª–∏—Ü: {table_error}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
        print(f"üîç [DEBUG] –¢–∏–ø –æ—à–∏–±–∫–∏ –ë–î: {type(e)}")
        import traceback
        print(f"üîç [DEBUG] –¢—Ä–µ–π—Å –æ—à–∏–±–∫–∏ –ë–î: {traceback.format_exc()}")
        raise
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis
    try:
        print("üîç [DEBUG] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Redis...")
        await init_redis()
        print("‚úÖ Redis –∫—ç—à –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ Redis
        print("üîç [DEBUG] –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Redis...")
        redis_health = await get_redis_health()
        print(f"üîç [DEBUG] –°—Ç–∞—Ç—É—Å Redis: {'‚úÖ –ó–¥–æ—Ä–æ–≤—ã–π' if redis_health else '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Redis: {e}")
        print(f"üîç [DEBUG] –¢–∏–ø –æ—à–∏–±–∫–∏ Redis: {type(e)}")
        import traceback
        print(f"üîç [DEBUG] –¢—Ä–µ–π—Å –æ—à–∏–±–∫–∏ Redis: {traceback.format_exc()}")
        raise
    
    print("üéâ –í–µ–±-–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    
    yield
    
    # Shutdown
    print("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±-–ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞...")
    
    try:
        await close_redis()
        print("‚úÖ Redis —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è Redis: {e}")
    
    try:
        await close_db()
        print("‚úÖ –ë–î —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ë–î: {e}")
    
    print("üëã –í–µ–±-–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")


def create_application() -> FastAPI:
    """
    –§–∞–±—Ä–∏–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è FastAPI —Å –ª—É—á—à–∏–º–∏ –ø—Ä–∞–∫—Ç–∏–∫–∞–º–∏
    """
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è FastAPI
    app = FastAPI(
        title="Analyzer Platform",
        description="–í–µ–±-–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–∏—Å—Ç–µ–º—ã —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π HTML –æ—Ç—á–µ—Ç–æ–≤",
        version="v0.0.1",
        docs_url="/api/docs" if settings.ENVIRONMENT != "production" else None,
        redoc_url="/api/redoc" if settings.ENVIRONMENT != "production" else None,
        openapi_url="/api/openapi.json" if settings.ENVIRONMENT != "production" else None,
        lifespan=lifespan,
        # –¢–µ–≥–∏ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ endpoints
        tags_metadata=[
            {
                "name": "reports",
                "description": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞",
            },
            {
                "name": "analytics",
                "description": "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
            },
            {
                "name": "upload",
                "description": "–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –æ—Ç—á–µ—Ç–æ–≤",
            },
            {
                "name": "health",
                "description": "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã",
            },
        ]
    )
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
    app.add_middleware(
        CORSMiddleware,
        allow_origins=["*"],
        allow_credentials=True,
        allow_methods=["GET", "POST", "PUT", "DELETE", "OPTIONS", "PATCH"],
        allow_headers=["*"],
        expose_headers=["*"],
    )
    
    # Middleware –¥–ª—è —Å–∂–∞—Ç–∏—è
    app.add_middleware(GZipMiddleware, minimum_size=1000)
    
    # Middleware –¥–ª—è –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö —Ö–æ—Å—Ç–æ–≤
    app.add_middleware(
        TrustedHostMiddleware,
        allowed_hosts=["*"]
    )
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ API —Ä–æ—É—Ç–µ—Ä–æ–≤
    app.include_router(
        api_router,
        prefix="/api/v1"
    )
    
    # –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã (–¥–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤)
    if os.path.exists("uploads"):
        app.mount("/uploads", StaticFiles(directory="uploads"), name="uploads")
    
    # –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã frontend
    frontend_path = "../frontend"
    if os.path.exists(frontend_path):
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ—Å—É—Ä—Å—ã (CSS, JS)
        if os.path.exists(os.path.join(frontend_path, "css")):
            app.mount("/css", StaticFiles(directory=os.path.join(frontend_path, "css")), name="css")
        if os.path.exists(os.path.join(frontend_path, "js")):
            app.mount("/js", StaticFiles(directory=os.path.join(frontend_path, "js")), name="js")
        
        # –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        @app.get("/", include_in_schema=False)
        async def serve_frontend():
            return FileResponse(os.path.join(frontend_path, "index.html"))
    
    # –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã frontend (–≤ production)
    elif settings.ENVIRONMENT == "production" and os.path.exists("../frontend/dist"):
        app.mount("/", StaticFiles(directory="../frontend/dist", html=True), name="frontend")
    
    # Health check endpoint
    @app.get("/health", tags=["health"])
    async def health_check():
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
        """
        db_status = await get_db_health()
        redis_status = await get_redis_health()
        
        status = "healthy" if db_status and redis_status else "unhealthy"
        
        return {
            "status": status,
            "timestamp": datetime.utcnow().isoformat(),
            "services": {
                "database": "healthy" if db_status else "unhealthy",
                "redis": "healthy" if redis_status else "unhealthy"
            }
        }
    
    # App info endpoint
    @app.get("/api/v1/app/info", tags=["app"])
    async def get_app_info():
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
        """
        return {
            "name": settings.APP_NAME,
            "version": settings.APP_VERSION,
            "environment": settings.ENVIRONMENT,
            "description": "–í–µ–±-–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–∏—Å—Ç–µ–º—ã —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π HTML –æ—Ç—á–µ—Ç–æ–≤"
        }
    
    # Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
    @app.middleware("http")
    async def log_requests(request: Request, call_next):
        start_time = datetime.utcnow()
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
        print(f"üì• {request.method} {request.url.path}")
        
        response = await call_next(request)
        
        # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        process_time = (datetime.utcnow() - start_time).total_seconds()
        response.headers["X-Process-Time"] = str(process_time)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        print(f"üì§ {request.method} {request.url.path} - {response.status_code} ({process_time:.3f}s)")
        
        return response
    
    return app


# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = create_application()


if __name__ == "__main__":
    """
    –ó–∞–ø—É—Å–∫ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    """
    uvicorn.run(
        "main:app",
        host="0.0.0.0",
        port=8000,
        reload=True,
        log_level="info",
        access_log=True,
        reload_dirs=["./"],
        reload_excludes=["*.pyc", "*.pyo", "__pycache__"]
    ) 