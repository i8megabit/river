"""
–ì–ª–∞–≤–Ω—ã–π —Ä–æ—É—Ç–µ—Ä API v1
"""

import os
import uuid
from datetime import datetime
from typing import List, Optional
from fastapi import APIRouter, File, UploadFile, HTTPException, Depends, status
from fastapi.responses import JSONResponse, FileResponse
from sqlalchemy.ext.asyncio import AsyncSession
from core.database import get_db
from services.html_parser import parse_analyzer_html_file
from models.report import Melt, NetworkConnection, NetworkPort, RemoteHost
from pydantic import BaseModel
from services.report_deduplication import generate_report_hash, find_duplicate_reports, create_hash_based_filename
from sqlalchemy import select, desc, or_, func
import json
from sqlalchemy.orm import selectinload

# –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω—ã–π —Ä–æ—É—Ç–µ—Ä
api_router = APIRouter()

# Pydantic –º–æ–¥–µ–ª–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤
class MeltSummary(BaseModel):
    id: str
    hostname: str
    filename: str
    generated_at: str
    os_name: Optional[str]
    total_connections: int
    file_size: int
    report_hash: Optional[str] = None  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –¥–ª—è —Ö–µ—à–∞ –æ—Ç—á–µ—Ç–∞
    tcp_ports_count: int = 0  # –£–±–∏—Ä–∞–µ–º Optional, –≤—Å–µ–≥–¥–∞ —á–∏—Å–ª–æ
    udp_ports_count: int = 0  # –£–±–∏—Ä–∞–µ–º Optional, –≤—Å–µ–≥–¥–∞ —á–∏—Å–ª–æ
    file_exists: Optional[bool] = True
    processing_status: Optional[str] = "processed"
    
class MeltsList(BaseModel):
    melts: List[MeltSummary]
    total: int

def serialize_datetime_for_json(obj):
    """–°–µ—Ä–∏–∞–ª–∏–∑—É–µ—Ç datetime –æ–±—ä–µ–∫—Ç—ã –¥–ª—è JSON"""
    if isinstance(obj, datetime):
        return obj.isoformat()
    elif isinstance(obj, dict):
        return {k: serialize_datetime_for_json(v) for k, v in obj.items()}
    elif isinstance(obj, list):
        return [serialize_datetime_for_json(item) for item in obj]
    else:
        return obj

def _format_os_name(os_name: str, os_version: str) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ
    
    Args:
        os_name: –ù–∞–∑–≤–∞–Ω–∏–µ –û–°
        os_version: –í–µ—Ä—Å–∏—è –û–°
        
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –û–°
    """
    # –ï—Å–ª–∏ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –û–°
    if not os_name or os_name.lower() in ['unknown', 'none', 'null', '']:
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –û–°"
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –û–°
    if not os_version or os_version.lower() in ['unknown', 'none', 'null', '']:
        return os_name
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ, –∏ –≤–µ—Ä—Å–∏—è
    return f"{os_name} {os_version}".strip()

@api_router.get("/")
async def root():
    """–ö–æ—Ä–Ω–µ–≤–æ–π endpoint API"""
    return {"message": "–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä API v1", "version": "v0.0.1"}

@api_router.get("/reports", response_model=MeltsList)
async def get_melts(db: AsyncSession = Depends(get_db)):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –æ—Ç—á–µ—Ç–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print(f"üîç [DEBUG] –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤ –∏–∑ –ë–î...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ç—á–µ—Ç—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è
        print(f"üîç [DEBUG] –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –ë–î...")
        stmt = select(Melt).order_by(desc(Melt.generated_at))
        result = await db.execute(stmt)
        melts = result.scalars().all()
        
        print(f"üîç [DEBUG] –ü–æ–ª—É—á–µ–Ω–æ {len(melts)} –æ—Ç—á–µ—Ç–æ–≤ –∏–∑ –ë–î")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç—á–µ—Ç–æ–≤ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
        melts_list = []
        
        for i, melt in enumerate(melts):
            print(f"üîç [DEBUG] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç—á—ë—Ç {i+1}/{len(melts)}: {melt.hostname}")
            print(f"üîç [DEBUG] - ID: {melt.id}")
            print(f"üîç [DEBUG] - TCP –ø–æ—Ä—Ç—ã: {melt.tcp_ports_count}")
            print(f"üîç [DEBUG] - UDP –ø–æ—Ä—Ç—ã: {melt.udp_ports_count}")
            print(f"üîç [DEBUG] - –°–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {melt.total_connections}")
            print(f"üîç [DEBUG] - HTML —Ñ–∞–π–ª: {melt.html_file_path}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            file_exists = bool(melt.html_file_path and os.path.exists(melt.html_file_path))
            print(f"üîç [DEBUG] - –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {file_exists}")
            
            melt_summary = MeltSummary(
                id=str(melt.id),
                hostname=melt.hostname,
                filename=os.path.basename(melt.html_file_path) if melt.html_file_path else "unknown.html",
                generated_at=melt.generated_at.isoformat() if melt.generated_at else "",
                os_name=melt.os_name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –û–°",
                total_connections=melt.total_connections or 0,
                file_size=melt.file_size or 0,
                report_hash=melt.report_hash,
                tcp_ports_count=int(melt.tcp_ports_count or 0),  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ int
                udp_ports_count=int(melt.udp_ports_count or 0),  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ int
                file_exists=file_exists,
                processing_status=melt.processing_status or 'unknown'
            )
            
            melts_list.append(melt_summary)
            print(f"üîç [DEBUG] ‚úÖ –û—Ç—á–µ—Ç {i+1} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫")
        
        print(f"üìã [SUCCESS] –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ {len(melts_list)} –æ—Ç—á–µ—Ç–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        
        # –ï—Å–ª–∏ –ë–î –ø—É—Å—Ç–∞, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ fallback
        if len(melts_list) == 0:
            print(f"‚ö†Ô∏è [WARNING] –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ fallback –ø–∞—Ä—Å–∏–Ω–≥—É —Ñ–∞–π–ª–æ–≤...")
            raise Exception("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞, –Ω—É–∂–µ–Ω fallback")
        
        return MeltsList(
            melts=melts_list,
            total=len(melts_list)
        )
        
    except Exception as e:
        print(f"‚ùå [ERROR] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –æ—Ç—á–µ—Ç–æ–≤ –∏–∑ –ë–î: {e}")
        print(f"üîç [DEBUG] –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e)}")
        print(f"üîÑ [FALLBACK] –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–ª—É—á–µ–Ω–∏—é –æ—Ç—á–µ—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã...")
        
        # Fallback: –ø–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç—ã –∏–∑ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
        try:
            from services.html_parser import parse_analyzer_html_file
            
            uploads_dir = "uploads"
            melts_list = []
            
            print(f"üîç [FALLBACK] –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–ø–∫—É {uploads_dir}...")
            
            if os.path.exists(uploads_dir):
                html_files = [f for f in os.listdir(uploads_dir) if f.endswith('.html')]
                print(f"üîç [FALLBACK] –ù–∞–π–¥–µ–Ω–æ HTML —Ñ–∞–π–ª–æ–≤: {len(html_files)}")
                
                for i, filename in enumerate(html_files[:50]):  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                    file_path = os.path.join(uploads_dir, filename)
                    
                    print(f"üîç [FALLBACK] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª {i+1}/{min(len(html_files), 50)}: {filename}")
                    
                    try:
                        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
                        file_size = os.path.getsize(file_path)
                        
                        print(f"üîç [FALLBACK] –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —Ñ–∞–π–ª–∞ {filename}, —Ä–∞–∑–º–µ—Ä: {file_size}")
                        
                        # –ë—ã—Å—Ç—Ä–æ –ø–∞—Ä—Å–∏–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                        parsed_data = await parse_analyzer_html_file(file_path)
                        
                        print(f"üîç [FALLBACK] –ü–∞—Ä—Å–∏–Ω–≥ {filename}: –Ω–∞–π–¥–µ–Ω–æ –∫–ª—é—á–µ–π {len(parsed_data.keys())}")
                        print(f"üîç [FALLBACK] –ö–ª—é—á–∏: {list(parsed_data.keys())}")
                        print(f"üîç [FALLBACK] –¢–∏–ø ports: {type(parsed_data.get('ports', '–ù–ï–¢'))}")
                        if parsed_data.get('ports'):
                            print(f"üîç [FALLBACK] –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ç–æ–≤: {len(parsed_data['ports'])}")
                        
                        # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ç–æ–≤ –∏–∑ –ø–∞—Ä—Å–µ–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                        tcp_ports_count = 0
                        udp_ports_count = 0
                        
                        print(f"üîç –ü–∞—Ä—Å–∏–Ω–≥ –ø–æ—Ä—Ç–æ–≤ –∏–∑ –¥–∞–Ω–Ω—ã—Ö:")
                        print(f"   parsed_data.keys(): {list(parsed_data.keys())}")
                        
                        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Ä—Ç–æ–≤
                        if parsed_data.get("ports"):
                            ports_data = parsed_data["ports"]
                            print(f"üîç [DEBUG] –§–∞–π–ª {filename}: ports_data type={type(ports_data)}, content={ports_data}")
                            
                            # –ï—Å–ª–∏ ports - —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å —Å tcp/udp –∫–ª—é—á–∞–º–∏
                            if isinstance(ports_data, dict):
                                tcp_ports_list = ports_data.get("tcp", [])
                                udp_ports_list = ports_data.get("udp", [])
                                tcp_ports_count = len(tcp_ports_list)
                                udp_ports_count = len(udp_ports_list)
                                print(f"üîç [DEBUG] TCP: {tcp_ports_count}, UDP: {udp_ports_count}, total_ports: {tcp_ports_count + udp_ports_count}")
                                if tcp_ports_list:
                                    print(f"üîç [DEBUG] –ø–µ—Ä–≤—ã–π TCP –ø–æ—Ä—Ç: {tcp_ports_list[0]}")
                                if udp_ports_list:
                                    print(f"üîç [DEBUG] –ø–µ—Ä–≤—ã–π UDP –ø–æ—Ä—Ç: {udp_ports_list[0]}")
                            
                            # –ï—Å–ª–∏ ports - —ç—Ç–æ –ø–ª–æ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ (–Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç API)
                            elif isinstance(ports_data, list):
                                print(f"üîç [DEBUG] —Å–ø–∏—Å–æ–∫ –ø–æ—Ä—Ç–æ–≤: {len(ports_data)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                                for port in ports_data:
                                    if isinstance(port, dict):
                                        protocol = port.get('protocol', '').upper()
                                        if protocol == 'TCP':
                                            tcp_ports_count += 1
                                        elif protocol == 'UDP':
                                            udp_ports_count += 1
                                print(f"üîç [DEBUG] –ø–æ–¥—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –ø–æ—Ä—Ç—ã: TCP={tcp_ports_count}, UDP={udp_ports_count}")
                        
                        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ "ports", –∏—â–µ–º –≤ –¥—Ä—É–≥–∏—Ö –º–µ—Å—Ç–∞—Ö
                        if tcp_ports_count == 0 and udp_ports_count == 0:
                            # –ò—â–µ–º –≤ tcp_ports_count –∏ udp_ports_count –Ω–∞–ø—Ä—è–º—É—é
                            tcp_ports_count = parsed_data.get("tcp_ports_count", 0)
                            udp_ports_count = parsed_data.get("udp_ports_count", 0)
                            print(f"üîç [DEBUG] fallback –∫ –ø—Ä—è–º—ã–º –ø–æ–ª—è–º: TCP={tcp_ports_count}, UDP={udp_ports_count}")
                        
                        print(f"üö™ –ò—Ç–æ–≥–æ–≤—ã–µ –ø–æ—Ä—Ç—ã: TCP={tcp_ports_count}, UDP={udp_ports_count}")
                        
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞—Ç—É –∏–∑ –ø–∞—Ä—Å–µ–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –≤—Ä–µ–º—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞
                        generated_at = None
                        if parsed_data.get("generated_at"):
                            try:
                                generated_at = datetime.fromisoformat(parsed_data["generated_at"].replace('Z', '+00:00')).isoformat()
                            except Exception:
                                pass
                        
                        if not generated_at and parsed_data.get("last_update"):
                            try:
                                if isinstance(parsed_data["last_update"], datetime):
                                    generated_at = parsed_data["last_update"].isoformat()
                                else:
                                    generated_at = parsed_data["last_update"]
                            except Exception:
                                pass
                        
                        # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞
                        if not generated_at:
                            generated_at = datetime.fromtimestamp(os.path.getmtime(file_path)).isoformat()
                        
                        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –û–°
                        os_name = parsed_data.get('os_name', '')
                        os_version = parsed_data.get('os_version', '')
                        formatted_os = f"{os_name} {os_version}".strip() if os_name and os_name.lower() not in ['unknown', 'none', 'null', ''] else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –û–°"
                        
                        melt_summary = MeltSummary(
                            id=filename,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∫–∞–∫ ID
                            hostname=parsed_data.get("hostname", "unknown"),
                            filename=filename,
                            generated_at=generated_at,
                            os_name=formatted_os,
                            total_connections=int(parsed_data.get("total_connections", 0)),
                            file_size=file_size,
                            tcp_ports_count=int(tcp_ports_count),  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ int
                            udp_ports_count=int(udp_ports_count),  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ int
                            report_hash=parsed_data.get("report_hash"),
                            file_exists=True,
                            processing_status="processed"
                        )
                        
                        melts_list.append(melt_summary)
                        print(f"‚úÖ [FALLBACK] –§–∞–π–ª {filename} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
                        
                    except Exception as parse_error:
                        print(f"‚ö†Ô∏è [FALLBACK] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ñ–∞–π–ª–∞ {filename}: {parse_error}")
                        print(f"‚ö†Ô∏è [FALLBACK] –¢–∏–ø –æ—à–∏–±–∫–∏: {type(parse_error)}")
                        import traceback
                        print(f"‚ö†Ô∏è [FALLBACK] –¢—Ä–µ–π—Å: {traceback.format_exc()}")
                        continue
            else:
                print(f"‚ùå [FALLBACK] –ü–∞–ø–∫–∞ {uploads_dir} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            
            print(f"üìã [FALLBACK] –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ {len(melts_list)} –æ—Ç—á–µ—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã")
            
            return MeltsList(
                melts=melts_list,
                total=len(melts_list)
            )
            
        except Exception as fallback_error:
            print(f"‚ùå [FALLBACK] –û—à–∏–±–∫–∞ fallback –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤: {fallback_error}")
            import traceback
            print(f"‚ùå [FALLBACK] –¢—Ä–µ–π—Å: {traceback.format_exc()}")
            raise HTTPException(
                status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
                detail="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ç—á–µ—Ç–æ–≤"
            )

@api_router.post("/reports/upload")
async def melt(
    file: UploadFile = File(...),
    db: AsyncSession = Depends(get_db)
):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞ —Å –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ö–µ—à-id –∏–∑ HTML –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
    if not file.filename.endswith('.html'):
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ HTML —Ñ–∞–π–ª—ã –æ—Ç—á–µ—Ç–æ–≤"
        )
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏
        from services.html_parser import parse_analyzer_html_file
        from models.report import Melt
        from sqlalchemy import select
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É uploads –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        uploads_dir = "uploads"
        os.makedirs(uploads_dir, exist_ok=True)
        
        # –°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –º–µ—Å—Ç–æ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
        content = await file.read()
        temp_file_path = os.path.join(uploads_dir, f"temp_{uuid.uuid4()}.html")
        
        with open(temp_file_path, "wb") as f:
            f.write(content)
        
        # –ü–∞—Ä—Å–∏–º HTML –æ—Ç—á–µ—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –≤–∫–ª—é—á–∞—è —Ö–µ—à –∏ ID
        try:
            parsed_data = await parse_analyzer_html_file(temp_file_path)
            hostname = parsed_data.get("hostname", "unknown")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ö–µ—à –∏ ID –æ—Ç—á–µ—Ç–∞ –∏–∑ HTML –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
            report_hash = parsed_data.get("report_hash")
            report_id = parsed_data.get("report_id")
            
            print(f"üîç –ù–æ–≤—ã–π –æ—Ç—á–µ—Ç: hostname='{hostname}'")
            
            if report_hash:
                print(f"üîê –•–µ—à –∏–∑ HTML: {report_hash}")
            else:
                print("‚ö†Ô∏è –•–µ—à –æ—Ç—á–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ HTML –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö")
                
            if report_id:
                print(f"üîë ID –∏–∑ HTML: {report_id}")
            else:
                print("‚ö†Ô∏è ID –æ—Ç—á–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ HTML –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö")
                
        except Exception as parse_error:
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –µ—Å–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è
            if os.path.exists(temp_file_path):
                os.remove(temp_file_path)
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail=f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ HTML –æ—Ç—á–µ—Ç–∞: {str(parse_error)}"
            )
        
        # –ï—Å–ª–∏ —Ö–µ—à –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ HTML, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –µ–≥–æ –∫–∞–∫ fallback
        if not report_hash:
            try:
                from services.report_deduplication import generate_report_hash
                report_hash = generate_report_hash(temp_file_path, parsed_data)
                print(f"üîó –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω fallback —Ö–µ—à: {report_hash}")
            except Exception as hash_error:
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø—Ä–∏ –æ—à–∏–±–∫–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ö–µ—à–∞
                if os.path.exists(temp_file_path):
                    os.remove(temp_file_path)
                raise HTTPException(
                    status_code=status.HTTP_400_BAD_REQUEST,
                    detail=f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ö–µ—à–∞ –æ—Ç—á–µ—Ç–∞: {str(hash_error)}"
                )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Ç—á–µ—Ç–∞ —Å —Ç–∞–∫–∏–º –∂–µ —Ö–µ—à–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        existing_melt = None
        replaced_melt_info = None
        
        try:
            stmt = select(Melt).where(Melt.report_hash == report_hash)
            result = await db.execute(stmt)
            existing_melt = result.scalar_one_or_none()

            if existing_melt:
                print(f"üîç –ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ—Ç—á—ë—Ç —Å —Ö–µ—à–µ–º {report_hash}: ID={existing_melt.id}")
                replaced_melt_info = {
                    'id': str(existing_melt.id),
                    'hostname': existing_melt.hostname,
                    'generated_at': existing_melt.generated_at.isoformat() if existing_melt.generated_at else None,
                    'file_path': existing_melt.html_file_path,
                    'report_hash': existing_melt.report_hash
                }
                
                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª –æ—Ç—á–µ—Ç–∞ –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                if existing_melt.html_file_path and os.path.exists(existing_melt.html_file_path):
                    try:
                        os.remove(existing_melt.html_file_path)
                        print(f"üóëÔ∏è –£–¥–∞–ª—ë–Ω —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª –æ—Ç—á—ë—Ç–∞: {existing_melt.html_file_path}")
                    except Exception as e:
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")
                
                # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–∫–∞—Å–∫–∞–¥–Ω–æ —É–¥–∞–ª—è—Ç—Å—è —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏)
                await db.delete(existing_melt)
                await db.commit()
                print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ—Ç—á–µ—Ç –∏–∑ –ë–î")
            
        except Exception as db_error:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –≤ –ë–î: {db_error}")
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –Ω–æ –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –≤ –ë–î
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –≤ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ –ø–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ —Å —Ö–µ—à–µ–º
        from services.report_deduplication import find_duplicate_reports, create_hash_based_filename
        
        file_duplicates = find_duplicate_reports(report_hash, uploads_dir)
        removed_files_count = 0
        
        for duplicate_path in file_duplicates:
            if duplicate_path != temp_file_path:  # –ù–µ —É–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                try:
                    os.remove(duplicate_path)
                    removed_files_count += 1
                    print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω –¥—É–±–ª–∏—Ä—É—é—â–∏–π —Ñ–∞–π–ª: {os.path.basename(duplicate_path)}")
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {duplicate_path}: {e}")
        
        # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ö–µ—à–∞
        hash_based_filename = create_hash_based_filename(report_hash, file.filename)
        final_file_path = os.path.join(uploads_dir, hash_based_filename)
        
        # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ –∏—Ç–æ–≥–æ–≤–æ–µ –º–µ—Å—Ç–æ
        os.rename(temp_file_path, final_file_path)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç—á–µ—Ç–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö HTML –∏–ª–∏ –∏–∑ header_info
            report_generated_at = datetime.utcnow()  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
            
            # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–∞—Ç—É –∏–∑ analyzer-generated-at –º–µ—Ç–∞—Ç–µ–≥–∞
            if parsed_data.get("generated_at"):
                try:
                    # –î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ISO (2024-12-25T10:30:45.123456)
                    report_generated_at = datetime.fromisoformat(parsed_data["generated_at"].replace('Z', '+00:00'))
                except Exception as date_parse_error:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: {date_parse_error}")
            
            # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –ø—Ä–æ–±—É–µ–º –∏–∑ header_info
            if not parsed_data.get("generated_at") and parsed_data.get("last_update"):
                try:
                    report_generated_at = parsed_data["last_update"]
                except Exception:
                    pass
            
            # –ï—Å–ª–∏ –∏ —ç—Ç–æ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ, –ø—Ä–æ–±—É–µ–º –∏–∑ first_run
            if not parsed_data.get("generated_at") and not parsed_data.get("last_update") and parsed_data.get("first_run"):
                try:
                    report_generated_at = parsed_data["first_run"]
                except Exception:
                    pass
            
            print(f"üìÖ –î–∞—Ç–∞ –æ—Ç—á–µ—Ç–∞: {report_generated_at}")
            
            # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ç–æ–≤ –∏–∑ –ø–∞—Ä—Å–µ–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            tcp_ports_count = 0
            udp_ports_count = 0
            
            print(f"üîç –ü–∞—Ä—Å–∏–Ω–≥ –ø–æ—Ä—Ç–æ–≤ –∏–∑ –¥–∞–Ω–Ω—ã—Ö:")
            print(f"   parsed_data.keys(): {list(parsed_data.keys())}")
            
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Ä—Ç–æ–≤
            if parsed_data.get("ports"):
                ports_data = parsed_data["ports"]
                print(f"üîç [DEBUG] –§–∞–π–ª {file.filename}: ports_data type={type(ports_data)}, content={ports_data}")
                
                # –ï—Å–ª–∏ ports - —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å —Å tcp/udp –∫–ª—é—á–∞–º–∏
                if isinstance(ports_data, dict):
                    tcp_ports_list = ports_data.get("tcp", [])
                    udp_ports_list = ports_data.get("udp", [])
                    tcp_ports_count = len(tcp_ports_list)
                    udp_ports_count = len(udp_ports_list)
                    print(f"üîç [DEBUG] TCP: {tcp_ports_count}, UDP: {udp_ports_count}, total_ports: {tcp_ports_count + udp_ports_count}")
                    if tcp_ports_list:
                        print(f"üîç [DEBUG] –ø–µ—Ä–≤—ã–π TCP –ø–æ—Ä—Ç: {tcp_ports_list[0]}")
                    if udp_ports_list:
                        print(f"üîç [DEBUG] –ø–µ—Ä–≤—ã–π UDP –ø–æ—Ä—Ç: {udp_ports_list[0]}")
                
                # –ï—Å–ª–∏ ports - —ç—Ç–æ –ø–ª–æ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ (–Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç API)
                elif isinstance(ports_data, list):
                    print(f"üîç [DEBUG] —Å–ø–∏—Å–æ–∫ –ø–æ—Ä—Ç–æ–≤: {len(ports_data)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                    for port in ports_data:
                        if isinstance(port, dict):
                            protocol = port.get('protocol', '').upper()
                            if protocol == 'TCP':
                                tcp_ports_count += 1
                            elif protocol == 'UDP':
                                udp_ports_count += 1
                    print(f"üîç [DEBUG] –ø–æ–¥—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –ø–æ—Ä—Ç—ã: TCP={tcp_ports_count}, UDP={udp_ports_count}")
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ "ports", –∏—â–µ–º –≤ –¥—Ä—É–≥–∏—Ö –º–µ—Å—Ç–∞—Ö
            if tcp_ports_count == 0 and udp_ports_count == 0:
                # –ò—â–µ–º –≤ tcp_ports_count –∏ udp_ports_count –Ω–∞–ø—Ä—è–º—É—é
                tcp_ports_count = parsed_data.get("tcp_ports_count", 0)
                udp_ports_count = parsed_data.get("udp_ports_count", 0)
                print(f"üîç [DEBUG] fallback –∫ –ø—Ä—è–º—ã–º –ø–æ–ª—è–º: TCP={tcp_ports_count}, UDP={udp_ports_count}")
            
            print(f"üö™ –ò—Ç–æ–≥–æ–≤—ã–µ –ø–æ—Ä—Ç—ã: TCP={tcp_ports_count}, UDP={udp_ports_count}")
            
            # –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º parsed_data –¥–ª—è JSON –ø–æ–ª—è
            serialized_parsed_data = serialize_datetime_for_json(parsed_data)
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å Melt –∏—Å–ø–æ–ª—å–∑—É—è ID –∏–∑ HTML –µ—Å–ª–∏ –µ—Å—Ç—å
            new_melt = Melt(
                id=uuid.UUID(report_id) if report_id else None,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –∏–∑ HTML –µ—Å–ª–∏ –µ—Å—Ç—å
                report_hash=report_hash,
                hostname=hostname,
                report_title=f"–û—Ç—á–µ—Ç –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ - {hostname}",
                generated_at=report_generated_at,
                os_name=parsed_data.get("os_name", ""),
                os_version=parsed_data.get("os_version", ""),
                html_file_path=final_file_path,
                file_size=len(content),
                total_connections=parsed_data.get("total_connections", 0),
                incoming_connections=parsed_data.get("incoming_connections", 0),
                outgoing_connections=parsed_data.get("outgoing_connections", 0),
                # –°–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø–æ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞–º (–∏–∑ stat-card —ç–ª–µ–º–µ–Ω—Ç–æ–≤)
                tcp_connections=parsed_data.get("tcp_connections", 0),
                udp_connections=parsed_data.get("udp_connections", 0),
                icmp_connections=parsed_data.get("icmp_connections", 0),
                unique_processes=parsed_data.get("unique_processes", 0),
                unique_hosts=parsed_data.get("unique_hosts", 0),
                # –ü–æ—Ä—Ç—ã (–æ—Ç–¥–µ–ª—å–Ω–æ –æ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π)
                tcp_ports_count=tcp_ports_count,
                udp_ports_count=udp_ports_count,
                change_events_count=parsed_data.get("change_events_count", 0),
                raw_data=serialized_parsed_data,
                processing_status="processed"
            )
            
            db.add(new_melt)
            await db.flush()  # –ü–æ–ª—É—á–∞–µ–º ID –±–µ–∑ –∫–æ–º–º–∏—Ç–∞
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è, –ø–æ—Ä—Ç—ã) –≤ —Ç–æ–π –∂–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            melt_db_id = new_melt.id
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –≤ –ë–î
            connections_raw = parsed_data.get("connections", [])
            if connections_raw:
                print(f"üîó –°–æ—Ö—Ä–∞–Ω—è–µ–º {len(connections_raw)} —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –≤ –ë–î...")
                for i, conn in enumerate(connections_raw[:100]):  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 100 —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
                    try:
                        # –ü–∞—Ä—Å–∏–º first_seen –∏ last_seen
                        first_seen = None
                        last_seen = None
                        
                        if conn.get('first_seen'):
                            try:
                                first_seen = datetime.fromisoformat(conn['first_seen'].replace('Z', '+00:00'))
                            except Exception:
                                pass
                        
                        if conn.get('last_seen'):
                            try:
                                last_seen = datetime.fromisoformat(conn['last_seen'].replace('Z', '+00:00'))
                            except Exception:
                                pass
                        
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                        connection_type = conn.get('connection_type', 'unknown')
                        if not connection_type or connection_type == 'unknown':
                            direction = conn.get('direction', '')
                            if 'üì•' in direction or '–≤—Ö–æ–¥—è—â–µ–µ' in direction.lower():
                                connection_type = 'incoming'
                            elif 'üì§' in direction or '–∏—Å—Ö–æ–¥—è—â–µ–µ' in direction.lower():
                                connection_type = 'outgoing'
                            else:
                                connection_type = 'unknown'
                        
                        db_connection = NetworkConnection(
                            report_id=melt_db_id,
                            connection_type=connection_type,
                            local_address=conn.get('local_address', '')[:100],  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
                            remote_address=conn.get('remote_address', '')[:100],
                            remote_hostname=conn.get('remote_hostname', '')[:255],
                            process_name=conn.get('process_name', '')[:255],
                            protocol=conn.get('protocol', 'unknown')[:10],
                            first_seen=first_seen,
                            last_seen=last_seen,
                            packet_count=conn.get('packet_count', 0),
                            connection_status='active'
                        )
                        db.add(db_connection)
                        
                    except Exception as conn_error:
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è {i}: {conn_error}")
                        continue
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Ä—Ç—ã –≤ –ë–î
            ports_raw = parsed_data.get("ports", {})
            if ports_raw:
                print(f"üö™ –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Ä—Ç—ã –≤ –ë–î: TCP={len(ports_raw.get('tcp', []))}, UDP={len(ports_raw.get('udp', []))}")
                
                # TCP –ø–æ—Ä—Ç—ã
                for port_info in ports_raw.get('tcp', [])[:50]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 50 –ø–æ—Ä—Ç–æ–≤
                    try:
                        port_number = port_info.get('port_number') if isinstance(port_info, dict) else port_info
                        if isinstance(port_number, int):
                            db_port = NetworkPort(
                                report_id=melt_db_id,
                                port_number=port_number,
                                protocol='tcp',
                                description=port_info.get('description', f'TCP –ø–æ—Ä—Ç {port_number}')[:500] if isinstance(port_info, dict) else f'TCP –ø–æ—Ä—Ç {port_number}',
                                service_name=port_info.get('service_name', '')[:100] if isinstance(port_info, dict) else '',
                                status='listening'
                            )
                            db.add(db_port)
                    except Exception as port_error:
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è TCP –ø–æ—Ä—Ç–∞: {port_error}")
                        continue
                
                # UDP –ø–æ—Ä—Ç—ã
                for port_info in ports_raw.get('udp', [])[:50]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 50 –ø–æ—Ä—Ç–æ–≤
                    try:
                        port_number = port_info.get('port_number') if isinstance(port_info, dict) else port_info
                        if isinstance(port_number, int):
                            db_port = NetworkPort(
                                report_id=melt_db_id,
                                port_number=port_number,
                                protocol='udp',
                                description=port_info.get('description', f'UDP –ø–æ—Ä—Ç {port_number}')[:500] if isinstance(port_info, dict) else f'UDP –ø–æ—Ä—Ç {port_number}',
                                service_name=port_info.get('service_name', '')[:100] if isinstance(port_info, dict) else '',
                                status='listening'
                            )
                            db.add(db_port)
                    except Exception as port_error:
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è UDP –ø–æ—Ä—Ç–∞: {port_error}")
                        continue
            
            # –ö–æ–º–º–∏—Ç–∏–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤–º–µ—Å—Ç–µ
            await db.commit()
            await db.refresh(new_melt)

            final_melt_id = str(new_melt.id)
            print(f"‚úÖ –û—Ç—á—ë—Ç –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î —Å ID: {final_melt_id}")
            
        except Exception as db_save_error:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î: {db_save_error}")
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î, –≤—Å–µ —Ä–∞–≤–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö –¥–ª—è —Ñ–∞–π–ª–∞
            final_melt_id = report_id if report_id else report_hash  # –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –∏–∑ HTML –∏–ª–∏ —Ö–µ—à
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response_data = {
            "message": f"–û—Ç—á—ë—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω{' (–∑–∞–º–µ–Ω—ë–Ω –¥—É–±–ª–∏–∫–∞—Ç)' if existing_melt or removed_files_count > 0 else ''}",
            "report_id": final_melt_id,
            "report_hash": report_hash,
            "filename": file.filename,
            "saved_as": hash_based_filename,
            "file_size": len(content),
            "hostname": hostname,
            "connections_count": parsed_data.get("total_connections", 0),
            "is_replacement": bool(existing_melt or removed_files_count > 0),
            "deduplication_method": "html_metadata" if parsed_data.get("report_hash") else "generated_hash"
        }
        
        if existing_melt:
            response_data["replaced_melt"] = replaced_melt_info
            
        if removed_files_count > 0:
            response_data["removed_file_duplicates"] = removed_files_count
        
        # –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑ HTML, –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        if parsed_data.get("report_hash"):
            response_data["analyzer_metadata"] = {
                "report_id": report_id,
                "report_hash": report_hash,
                "analyzer_version": parsed_data.get("analyzer_version"),
                "hash_components": parsed_data.get("hash_components")
            }
        
        print(f"‚úÖ –û—Ç—á–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω: {hash_based_filename}")
        
        return response_data
        
    except HTTPException:
        # –£–±–∏—Ä–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø—Ä–∏ –æ—à–∏–±–∫–µ
        if 'temp_file_path' in locals() and os.path.exists(temp_file_path):
            os.remove(temp_file_path)
        raise
    except Exception as e:
        # –£–±–∏—Ä–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø—Ä–∏ –æ—à–∏–±–∫–µ
        if 'temp_file_path' in locals() and os.path.exists(temp_file_path):
            os.remove(temp_file_path)
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç—á–µ—Ç–∞: {str(e)}"
        )

@api_router.get("/reports/{report_id}/simple")
async def get_report_details_simple(report_id: str):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—Ç—á–µ—Ç–µ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
    try:
        print(f"üîç Getting simple report details for ID: {report_id}")
        
        # –ò—â–µ–º HTML —Ñ–∞–π–ª
        uploads_dir = "uploads"
        file_path = None
        
        print(f"üîç –ò—â–µ–º —Ñ–∞–π–ª –≤ –ø–∞–ø–∫–µ: {uploads_dir}")
        print(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏: {os.path.exists(uploads_dir)}")
        
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤
        if os.path.exists(uploads_dir):
            available_files = os.listdir(uploads_dir)
            print(f"üîç –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∞–π–ª—ã: {available_files}")
            
            for filename in available_files:
                print(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª: {filename}")
                # –†–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–∏—Å–∫–∞
                if (filename.startswith(report_id[:8]) or 
                    filename.startswith(report_id) or
                    f"_{report_id[:8]}" in filename or
                    f"_{report_id}" in filename or
                    report_id[:8] in filename or
                    report_id in filename) and filename.endswith('.html'):
                    file_path = os.path.join(uploads_dir, filename)
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ñ–∞–π–ª: {filename}")
                    break
        else:
            print(f"‚ùå –ü–∞–ø–∫–∞ {uploads_dir} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        
        if not file_path:
            print(f"‚ùå –§–∞–π–ª –¥–ª—è ID {report_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return {"error": f"Report {report_id} not found"}
        
        print(f"‚úÖ Found HTML file: {file_path}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        hostname = "unknown"
        os_name = "unknown"
        file_size = os.path.getsize(file_path)
        
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read(3000)
                import re
                
                # –ò—â–µ–º hostname
                hostname_match = re.search(r'<meta name="analyzer-hostname" content="([^"]+)"', content)
                if hostname_match:
                    hostname = hostname_match.group(1)
                else:
                    header_match = re.search(r'<strong>üñ•Ô∏è –•–æ—Å—Ç:</strong>\s*([^<]+)', content)
                    if header_match:
                        hostname = header_match.group(1).strip()
                
                # –û–°
                os_match = re.search(r'<strong>üíª –û–°:</strong>\s*([^<]+)', content)
                if os_match:
                    os_name = os_match.group(1).strip()
                
        except Exception as e:
            print(f"‚ö†Ô∏è Could not extract metadata: {e}")
        
        result = {
            "id": report_id,
            "hostname": hostname,
            "os": {"name": os_name, "version": ""},
            "file_size": file_size,
            "status": "found"
        }
        
        print(f"‚úÖ Returning simple report details for: {hostname}")
        return result
        
    except Exception as e:
        print(f"‚ùå Error in simple report details: {e}")
        return {"error": str(e)}

@api_router.get("/reports/{report_id}")
async def get_report_details(report_id: str, db: AsyncSession = Depends(get_db)):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—Ç—á–µ—Ç–µ"""
    try:
        print(f"üîç Getting report details for ID: {report_id}")
        
        # –ò–º–ø–æ—Ä—Ç—ã
        from sqlalchemy import select
        from sqlalchemy.orm import selectinload
        from models.report import Melt
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º Melt —Å —Å–≤—è–∑–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        db_melt = None
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ report_id –≤–∞–ª–∏–¥–Ω—ã–º UUID
        try:
            import uuid
            uuid_obj = uuid.UUID(report_id)
            # –≠—Ç–æ –≤–∞–ª–∏–¥–Ω—ã–π UUID - –∏—â–µ–º –≤ –ë–î
            stmt = select(Melt).options(
                selectinload(Melt.connections),
                selectinload(Melt.ports),
                selectinload(Melt.remote_hosts),
                selectinload(Melt.network_interfaces)
            ).where(Melt.id == uuid_obj)
            
            result = await db.execute(stmt)
            db_melt = result.scalar_one_or_none()
            
            if db_melt:
                print(f"‚úÖ –û—Ç—á—ë—Ç –Ω–∞–π–¥–µ–Ω –≤ –ë–î –ø–æ UUID: {report_id}")
            else:
                print(f"‚ùå –û—Ç—á—ë—Ç —Å UUID {report_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
                
        except ValueError:
            # –≠—Ç–æ –Ω–µ UUID - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫ –≤ –ë–î
            print(f"üîç {report_id} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è UUID, –∏—â–µ–º –∫–∞–∫ –∏–º—è —Ñ–∞–π–ª–∞")
        
        if not db_melt:
            print(f"‚ùå Report not found in database: {report_id}")
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î, –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–∏—Å–∫–∞—Ç—å —Ñ–∞–π–ª –Ω–∞–ø—Ä—è–º—É—é
            uploads_dir = "uploads"
            file_path = None
            
            if os.path.exists(uploads_dir):
                # –ï—Å–ª–∏ report_id –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ –∏–º—è —Ñ–∞–π–ª–∞, –∏—â–µ–º –µ–≥–æ —Ç–æ—á–Ω–æ
                if report_id.endswith('.html'):
                    potential_path = os.path.join(uploads_dir, report_id)
                    if os.path.exists(potential_path):
                        file_path = potential_path
                        print(f"‚úÖ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª –ø–æ —Ç–æ—á–Ω–æ–º—É –∏–º–µ–Ω–∏: {file_path}")
                
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è, –∏—â–µ–º –ø–æ –ø—Ä–µ—Ñ–∏–∫—Å—É
                if not file_path:
                    for filename in os.listdir(uploads_dir):
                        if (filename.startswith(report_id[:8]) or 
                            filename.startswith(report_id) or
                            report_id in filename) and filename.endswith('.html'):
                            file_path = os.path.join(uploads_dir, filename)
                            print(f"‚úÖ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª –ø–æ –ø—Ä–µ—Ñ–∏–∫—Å—É: {file_path}")
                            break
            
            if not file_path:
                raise HTTPException(
                    status_code=status.HTTP_404_NOT_FOUND,
                    detail=f"–û—Ç—á–µ—Ç —Å ID {report_id} –Ω–µ –Ω–∞–π–¥–µ–Ω"
                )
        else:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º filename –∏–∑ –ë–î
            uploads_dir = "uploads"
            if db_melt.html_file_path:
                file_path = db_melt.html_file_path
            else:
                # –ü—Ä–æ–±—É–µ–º –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –ø—É—Ç—å –∏–∑ report_hash
                filename = f"report_{db_melt.report_hash}.html"
                file_path = os.path.join(uploads_dir, filename)
        
        if not os.path.exists(file_path):
            print(f"‚ùå HTML file not found: {file_path}")
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail=f"–§–∞–π–ª –æ—Ç—á–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}"
            )
        
        print(f"‚úÖ Found HTML file: {file_path}")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ –ø–∞—Ä—Å–∏–º HTML
        if db_melt:
            hostname = db_melt.hostname
            os_name = db_melt.os_name or "unknown"
            os_version = db_melt.os_version or ""
            generated_at = db_melt.generated_at.isoformat() if db_melt.generated_at else datetime.now().isoformat()
            report_hash = db_melt.report_hash or ""
            file_size = db_melt.file_size or os.path.getsize(file_path)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑ –ë–î
            total_connections = db_melt.total_connections or 0
            tcp_connections = db_melt.tcp_connections or 0
            udp_connections = db_melt.udp_connections or 0
            icmp_connections = db_melt.icmp_connections or 0
            listening_ports = (db_melt.tcp_ports_count or 0) + (db_melt.udp_ports_count or 0)
            established_connections = (db_melt.incoming_connections or 0) + (db_melt.outgoing_connections or 0)
            total_ports = (db_melt.tcp_ports_count or 0) + (db_melt.udp_ports_count or 0)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            connections_data = []
            for conn in db_melt.connections[:50]:  # –ü–µ—Ä–≤—ã–µ 50 —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
                connections_data.append({
                    "id": str(conn.id),
                    "type": conn.connection_type,
                    "local_address": conn.local_address,
                    "remote_address": conn.remote_address,
                    "remote_hostname": conn.remote_hostname,
                    "process": conn.process_name,
                    "protocol": conn.protocol,
                    "first_seen": conn.first_seen.isoformat() if conn.first_seen else None,
                    "last_seen": conn.last_seen.isoformat() if conn.last_seen else None,
                    "packet_count": conn.packet_count
                })
            
            ports_data = []
            for port in db_melt.ports[:100]:  # –ü–µ—Ä–≤—ã–µ 100 –ø–æ—Ä—Ç–æ–≤
                ports_data.append({
                    "id": str(port.id),
                    "port_number": port.port_number,
                    "protocol": port.protocol,
                    "description": port.description,
                    "service_name": port.service_name,
                    "process": port.process_name,
                    "status": port.status
                })
            
            # –ï—Å–ª–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—É—Å—Ç—ã, –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∏–∑ raw_data
            if not connections_data and not ports_data and db_melt.raw_data:
                print("üìä –°–≤—è–∑–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –ø—É—Å—Ç—ã, –∏–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ raw_data...")
                raw_data = db_melt.raw_data
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏–∑ raw_data
                if raw_data.get("connections"):
                    print(f"üîó –ù–∞–π–¥–µ–Ω–æ {len(raw_data['connections'])} —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –≤ raw_data")
                    for i, conn in enumerate(raw_data["connections"][:50]):
                        connections_data.append({
                            "id": f"raw_{i}",
                            "type": conn.get('connection_type', 'unknown'),
                            "local_address": conn.get('local_address', ''),
                            "remote_address": conn.get('remote_address', ''),
                            "remote_hostname": conn.get('remote_hostname', ''),
                            "process": conn.get('process_name', ''),
                            "protocol": conn.get('protocol', 'unknown'),
                            "first_seen": conn.get('first_seen'),
                            "last_seen": conn.get('last_seen'),
                            "packet_count": conn.get('packet_count', 0)
                        })
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ—Ä—Ç—ã –∏–∑ raw_data
                if raw_data.get("ports"):
                    ports_raw = raw_data["ports"]
                    
                    # TCP –ø–æ—Ä—Ç—ã
                    tcp_ports = ports_raw.get("tcp", [])
                    print(f"üö™ –ù–∞–π–¥–µ–Ω–æ {len(tcp_ports)} TCP –ø–æ—Ä—Ç–æ–≤ –≤ raw_data")
                    for i, port_info in enumerate(tcp_ports[:50]):
                        port_number = port_info.get('port_number') if isinstance(port_info, dict) else port_info
                        if isinstance(port_number, int):
                            ports_data.append({
                                "id": f"tcp_raw_{i}",
                                "port_number": port_number,
                                "protocol": "tcp",
                                "description": port_info.get('description', f'TCP –ø–æ—Ä—Ç {port_number}') if isinstance(port_info, dict) else f'TCP –ø–æ—Ä—Ç {port_number}',
                                "service_name": port_info.get('service_name', '') if isinstance(port_info, dict) else '',
                                "process": port_info.get('process_name', '') if isinstance(port_info, dict) else '',
                                "status": "listening"
                            })
                    
                    # UDP –ø–æ—Ä—Ç—ã
                    udp_ports = ports_raw.get("udp", [])
                    print(f"üö™ –ù–∞–π–¥–µ–Ω–æ {len(udp_ports)} UDP –ø–æ—Ä—Ç–æ–≤ –≤ raw_data")
                    for i, port_info in enumerate(udp_ports[:50]):
                        port_number = port_info.get('port_number') if isinstance(port_info, dict) else port_info
                        if isinstance(port_number, int):
                            ports_data.append({
                                "id": f"udp_raw_{i}",
                                "port_number": port_number,
                                "protocol": "udp",
                                "description": port_info.get('description', f'UDP –ø–æ—Ä—Ç {port_number}') if isinstance(port_info, dict) else f'UDP –ø–æ—Ä—Ç {port_number}',
                                "service_name": port_info.get('service_name', '') if isinstance(port_info, dict) else '',
                                "process": port_info.get('process_name', '') if isinstance(port_info, dict) else '',
                                "status": "listening"
                            })
                
                print(f"üìä –ò–∑–≤–ª–µ—á–µ–Ω–æ –∏–∑ raw_data: {len(connections_data)} —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π, {len(ports_data)} –ø–æ—Ä—Ç–æ–≤")
            
            remote_hosts_data = []
            for host in db_melt.remote_hosts[:50]:  # –ü–µ—Ä–≤—ã–µ 50 —Ö–æ—Å—Ç–æ–≤
                remote_hosts_data.append({
                    "id": str(host.id),
                    "ip_address": host.ip_address,
                    "hostname": host.hostname,
                    "connection_count": host.connection_count,
                    "first_seen": host.first_seen.isoformat() if host.first_seen else None,
                    "last_seen": host.last_seen.isoformat() if host.last_seen else None,
                    "country": host.country,
                    "organization": host.organization
                })
            
            network_interfaces_data = []
            for interface in db_melt.network_interfaces[:20]:  # –ü–µ—Ä–≤—ã–µ 20 –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤
                network_interfaces_data.append({
                    "id": str(interface.id),
                    "name": interface.interface_name,
                    "packets_in": interface.packets_in,
                    "packets_out": interface.packets_out,
                    "bytes_in": interface.bytes_in,
                    "bytes_out": interface.bytes_out,
                    "mtu": interface.mtu,
                    "status": interface.status
                })
                
        else:
            # Fallback: –ø–∞—Ä—Å–∏–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑ HTML
            hostname = "unknown"
            os_name = "unknown"
            os_version = ""
            generated_at = datetime.now().isoformat()
            report_hash = ""
            file_size = os.path.getsize(file_path)
            
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    content = f.read(5000)
                    import re
                    
                    # –ò—â–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                    hostname_match = re.search(r'<meta name="analyzer-hostname" content="([^"]+)"', content)
                    if hostname_match:
                        hostname = hostname_match.group(1)
                    
                    # –û–°
                    os_match = re.search(r'<strong>üíª –û–°:</strong>\s*([^<]+)', content)
                    if os_match:
                        os_full = os_match.group(1).strip()
                        parts = os_full.split(' ', 1)
                        os_name = parts[0]
                        os_version = parts[1] if len(parts) > 1 else ""
                    
                    # –•–µ—à –æ—Ç—á–µ—Ç–∞
                    hash_match = re.search(r'<meta name="analyzer-report-hash" content="([^"]+)"', content)
                    if hash_match:
                        report_hash = hash_match.group(1)
                    
            except Exception as e:
                print(f"‚ö†Ô∏è Could not extract metadata from HTML: {e}")
            
            # –ü—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è fallback
            connections_data = []
            ports_data = []
            remote_hosts_data = []
            network_interfaces_data = []
            total_connections = 0
            tcp_connections = 0
            udp_connections = 0
            icmp_connections = 0
            listening_ports = 0
            established_connections = 0
            total_ports = 0
        
        result = {
            "id": report_id,
            "hostname": hostname,
            "generated_at": generated_at,
            "os": {
                "name": os_name,
                "version": os_version
            },
            "connections": connections_data,
            "ports": ports_data,
            "remote_hosts": remote_hosts_data,
            "network_info": {
                "interfaces": network_interfaces_data,
                "bytes_sent": sum(i.get('bytes_out', 0) for i in network_interfaces_data),
                "bytes_received": sum(i.get('bytes_in', 0) for i in network_interfaces_data),
                "countries": list(set(h.get('country') for h in remote_hosts_data if h.get('country')))
            },
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
            "total_connections": total_connections,
            "tcp_connections": tcp_connections,
            "udp_connections": udp_connections,
            "icmp_connections": icmp_connections,
            "listening_ports": listening_ports,
            "established_connections": established_connections,
            "total_ports": total_ports,
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ
            "file_size": file_size,
            "created_at": datetime.fromtimestamp(os.path.getmtime(file_path)).isoformat(),
            "report_hash": report_hash
        }
        
        print(f"‚úÖ Returning detailed report for: {hostname} ({len(connections_data)} connections, {len(ports_data)} ports)")
        return result
        
    except HTTPException:
        raise
    except Exception as e:
        print(f"‚ùå Unexpected error: {e}")
        import traceback
        print(f"‚ùå Traceback: {traceback.format_exc()}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {str(e)}"
        )

@api_router.get("/reports/{report_id}/download")
async def download_report(report_id: str, db: AsyncSession = Depends(get_db)):
    """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ HTML —Ñ–∞–π–ª–∞ –æ—Ç—á–µ—Ç–∞"""
    try:
        print(f"üîç Download request for report ID: {report_id}")
        
        # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –æ—Ç—á–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        from sqlalchemy import select
        from models.report import Melt
        
        result = await db.execute(select(Melt).where(Melt.id == report_id))
        db_melt = result.scalar_one_or_none()
        
        file_path = None
        original_filename = None
        
        if db_melt:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Ç—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            if db_melt.html_file_path and os.path.exists(db_melt.html_file_path):
                file_path = db_melt.html_file_path
                original_filename = os.path.basename(file_path)
                print(f"‚úÖ –§–∞–π–ª –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ –ë–î: {file_path}")
            else:
                # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª –ø–æ —Ö–µ—à—É
                report_hash = db_melt.report_hash
                uploads_dir = "uploads"
                
                for filename in os.listdir(uploads_dir):
                    if filename.startswith(report_hash) and filename.endswith('.html'):
                        file_path = os.path.join(uploads_dir, filename)
                        original_filename = filename
                        print(f"‚úÖ –§–∞–π–ª –Ω–∞–π–¥–µ–Ω –ø–æ —Ö–µ—à—É: {file_path}")
                        break
        
        if not file_path:
            # Fallback: –ø–æ–∏—Å–∫ —Ñ–∞–π–ª–∞ –Ω–∞–ø—Ä—è–º—É—é –≤ uploads
            uploads_dir = "uploads"
            
            file_found = False
            
            # –ï—Å–ª–∏ report_id –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ –∏–º—è —Ñ–∞–π–ª–∞, –∏—â–µ–º –µ–≥–æ —Ç–æ—á–Ω–æ
            if report_id.endswith('.html'):
                file_path = os.path.join(uploads_dir, report_id)
                if os.path.exists(file_path):
                    try:
                        os.remove(file_path)
                        file_found = True
                        print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª –ø–æ —Ç–æ—á–Ω–æ–º—É –∏–º–µ–Ω–∏: {report_id}")
                    except Exception as e:
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {report_id}: {e}")
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è, –ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
            if not file_found:
                possible_files = [
                    f"{report_id}.html",
                    f"report_{report_id}.html"
                ]
                
                for filename in possible_files:
                    file_path = os.path.join(uploads_dir, filename)
                    if os.path.exists(file_path):
                        try:
                            os.remove(file_path)
                            file_found = True
                            print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª (–±–µ–∑ –∑–∞–ø–∏—Å–∏ –≤ –ë–î): {filename}")
                            break
                        except Exception as e:
                            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {filename}: {e}")
            
            # –ò—â–µ–º –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
            if not file_found and os.path.exists(uploads_dir):
                for filename in os.listdir(uploads_dir):
                    if report_id in filename and filename.endswith('.html'):
                        file_path = os.path.join(uploads_dir, filename)
                        try:
                            os.remove(file_path)
                            file_found = True
                            print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª (—á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ): {filename}")
                            break
                        except Exception as e:
                            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {filename}: {e}")
        
        if not file_path:
            print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è ID: {report_id}")
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail=f"–§–∞–π–ª –æ—Ç—á–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è ID: {report_id}"
            )
        
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å hostname –∏–∑ –æ—Ç—á–µ—Ç–∞ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –∏–º–µ–Ω–∏
        try:
            # –ü—Ä–æ—Å—Ç–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ hostname –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö HTML –±–µ–∑ –ø–æ–ª–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read(2000)  # –ß–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞
                import re
                # –ò—â–µ–º hostname –≤ –º–µ—Ç–∞—Ç–µ–≥–∞—Ö
                hostname_match = re.search(r'<meta name="analyzer-hostname" content="([^"]+)"', content)
                if hostname_match:
                    hostname = hostname_match.group(1)
                else:
                    # –ò—â–µ–º –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ
                    title_match = re.search(r'<title>.*?([A-Za-z0-9\-_]+).*?</title>', content)
                    hostname = title_match.group(1) if title_match else "unknown"
                
                # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –û–°
                os_match = re.search(r'<strong>üíª –û–°:</strong>\s*([^<]+)', content)
                os_name = os_match.group(1).strip() if os_match else ""
            
            # –û—á–∏—â–∞–µ–º –∏–º—è –æ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
            safe_hostname = "".join(c for c in hostname if c.isalnum() or c in "._-")
            safe_os = "".join(c for c in os_name.split()[0] if c.isalnum() or c in "._-") if os_name else ""
            
            if safe_os:
                clean_filename = f"analyzer_report_{safe_hostname}_{safe_os}_{report_id[:8]}.html"
            else:
                clean_filename = f"analyzer_report_{safe_hostname}_{report_id[:8]}.html"
        except Exception:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∏–º—è
            clean_filename = f"analyzer_report_{report_id}.html"
        
        print(f"üìÅ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª: {clean_filename}")
        
        # –°–æ–∑–¥–∞–µ–º –æ—Ç–≤–µ—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
        response = FileResponse(
            path=file_path,
            filename=clean_filename,
            media_type="text/html"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º Content-Disposition –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        response.headers["Content-Disposition"] = f'attachment; filename="{clean_filename}"'
        
        return response
        
    except HTTPException:
        raise
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ download: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {str(e)}"
        )

@api_router.delete("/reports/{report_id}")
async def delete_report(report_id: str, db: AsyncSession = Depends(get_db)):
    """–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –ø–æ ID –∏–ª–∏ —Ö–µ—à—É"""
    try:
        from sqlalchemy import select, or_
        from models.report import Melt
        import uuid
        
        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –æ—Ç—á–µ—Ç –ø–æ ID –∏–ª–∏ –ø–æ —Ö–µ—à—É
        stmt = None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ report_id UUID
        try:
            uuid_obj = uuid.UUID(report_id)
            # –≠—Ç–æ UUID - –∏—â–µ–º –ø–æ ID
            stmt = select(Melt).where(Melt.id == uuid_obj)
        except ValueError:
            # –≠—Ç–æ –Ω–µ UUID - –∏—â–µ–º –ø–æ —Ö–µ—à—É –∏–ª–∏ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
            stmt = select(Melt).where(
                or_(
                    Melt.report_hash == report_id,
                    Melt.html_file_path.contains(report_id)
                )
            )
        
        if stmt is None:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –æ—Ç—á–µ—Ç–∞"
            )
        
        result = await db.execute(stmt)
        report = result.scalar_one_or_none()
        
        if not report:
            # Fallback: –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª –≤ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ
            uploads_dir = "uploads"
            
            file_found = False
            
            # –ï—Å–ª–∏ report_id –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ –∏–º—è —Ñ–∞–π–ª–∞, –∏—â–µ–º –µ–≥–æ —Ç–æ—á–Ω–æ
            if report_id.endswith('.html'):
                file_path = os.path.join(uploads_dir, report_id)
                if os.path.exists(file_path):
                    try:
                        os.remove(file_path)
                        file_found = True
                        print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª –ø–æ —Ç–æ—á–Ω–æ–º—É –∏–º–µ–Ω–∏: {report_id}")
                    except Exception as e:
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {report_id}: {e}")
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è, –ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
            if not file_found:
                possible_files = [
                    f"{report_id}.html",
                    f"report_{report_id}.html"
                ]
                
                for filename in possible_files:
                    file_path = os.path.join(uploads_dir, filename)
                    if os.path.exists(file_path):
                        try:
                            os.remove(file_path)
                            file_found = True
                            print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª (–±–µ–∑ –∑–∞–ø–∏—Å–∏ –≤ –ë–î): {filename}")
                            break
                        except Exception as e:
                            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {filename}: {e}")
            
            # –ò—â–µ–º –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
            if not file_found and os.path.exists(uploads_dir):
                for filename in os.listdir(uploads_dir):
                    if report_id in filename and filename.endswith('.html'):
                        file_path = os.path.join(uploads_dir, filename)
                        try:
                            os.remove(file_path)
                            file_found = True
                            print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª (—á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ): {filename}")
                            break
                        except Exception as e:
                            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {filename}: {e}")
            
            if file_found:
                return {
                    "message": "–§–∞–π–ª –æ—Ç—á–µ—Ç–∞ —É–¥–∞–ª–µ–Ω",
                    "report_id": report_id,
                    "note": "–ó–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
                }
            else:
                raise HTTPException(
                    status_code=status.HTTP_404_NOT_FOUND,
                    detail="–û—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
                )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É–¥–∞–ª—è–µ–º–æ–º –æ—Ç—á–µ—Ç–µ
        deleted_report_info = {
            "id": str(report.id),
            "hostname": report.hostname,
            "filename": os.path.basename(report.html_file_path) if report.html_file_path else "unknown",
            "report_hash": report.report_hash,
            "file_size": report.file_size or 0
        }
        
        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –æ—Ç—á–µ—Ç–∞, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        file_deleted = False
        if report.html_file_path and os.path.exists(report.html_file_path):
            try:
                os.remove(report.html_file_path)
                file_deleted = True
                print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª –æ—Ç—á–µ—Ç–∞: {report.html_file_path}")
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
        
        # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–∫–∞—Å–∫–∞–¥–Ω–æ —É–¥–∞–ª—è—Ç—Å—è —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏)
        await db.delete(report)
        await db.commit()
        
        print(f"‚úÖ –û—Ç—á–µ—Ç —É–¥–∞–ª–µ–Ω: ID={report.id}, hostname={report.hostname}")
        
        return {
            "message": "–û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω",
            "deleted_report": deleted_report_info,
            "file_deleted": file_deleted
        }
        
    except HTTPException:
        raise
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {str(e)}"
        )

@api_router.get("/health")
async def api_health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API"""
    return {"status": "healthy", "api_version": "v1"}

@api_router.get("/reports/stats/summary")
async def get_melts_summary(db: AsyncSession = Depends(get_db)):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –æ—Ç—á–µ—Ç–∞–º"""
    try:
        print(f"üîç [DEBUG] –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        try:
            from sqlalchemy import select, func
            from models.report import Melt
            
            print(f"üîç [DEBUG] –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –ë–î...")
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –ë–î
            stmt = select(
                func.count(Melt.id).label('total_reports'),
                func.sum(Melt.total_connections).label('total_connections'),
                func.sum(Melt.tcp_ports_count).label('tcp_ports'),
                func.sum(Melt.udp_ports_count).label('udp_ports'),
                func.sum(Melt.unique_hosts).label('unique_hosts')
            )
            
            result = await db.execute(stmt)
            stats_row = result.first()
            
            if stats_row and stats_row.total_reports and stats_row.total_reports > 0:
                # –ï—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –ë–î
                total_melts = int(stats_row.total_reports or 0)
                total_connections = int(stats_row.total_connections or 0)
                tcp_ports = int(stats_row.tcp_ports or 0)
                udp_ports = int(stats_row.udp_ports or 0)
                total_ports = tcp_ports + udp_ports
                unique_hosts = int(stats_row.unique_hosts or 0)
                
                print(f"‚úÖ [DEBUG] –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑ –ë–î:")
                print(f"   üìä –û—Ç—á–µ—Ç–æ–≤: {total_reports}")
                print(f"   üîó –°–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {total_connections}")
                print(f"   üö™ TCP –ø–æ—Ä—Ç–æ–≤: {tcp_ports}")
                print(f"   üö™ UDP –ø–æ—Ä—Ç–æ–≤: {udp_ports}")
                print(f"   üö™ –í—Å–µ–≥–æ –ø–æ—Ä—Ç–æ–≤: {total_ports}")
                print(f"   üåê –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ö–æ—Å—Ç–æ–≤: {unique_hosts}")
                
                return {
                    "total_reports": total_reports,
                    "total_connections": total_connections,
                    "total_ports": total_ports,
                    "unique_hosts": unique_hosts
                }
            else:
                print(f"‚ö†Ô∏è [DEBUG] –ë–î –ø—É—Å—Ç–∞ –∏–ª–∏ –Ω–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ñ–∞–π–ª–∞–º...")
                raise Exception("–ë–î –ø—É—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
                
        except Exception as db_error:
            print(f"‚ö†Ô∏è [DEBUG] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ –ë–î: {db_error}")
            print(f"üîÑ [FALLBACK] –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Å—á–µ—Ç—É –∏–∑ —Ñ–∞–π–ª–æ–≤...")
        
        # Fallback: —Å—á–∏—Ç–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ —Ñ–∞–π–ª–æ–≤
        uploads_dir = "uploads"
        if not os.path.exists(uploads_dir):
            print(f"üîç [DEBUG] –ü–∞–ø–∫–∞ uploads –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return {
                "total_reports": 0,
                "total_connections": 0,
                "total_ports": 0,
                "unique_hosts": 0
            }
        
        total_melts = 0
        total_connections = 0
        total_ports = 0
        unique_hosts_set = set()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º set –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ö–æ—Å—Ç–æ–≤
        
        html_files = [f for f in os.listdir(uploads_dir) if f.endswith('.html')]
        print(f"üîç [FALLBACK] –ù–∞–π–¥–µ–Ω–æ HTML —Ñ–∞–π–ª–æ–≤: {len(html_files)}")
        
        for filename in html_files:
            total_reports += 1
            try:
                file_path = os.path.join(uploads_dir, filename)
                parsed_data = await parse_analyzer_html_file(file_path)
                
                # –°–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                connections_count = parsed_data.get("total_connections", 0)
                total_connections += connections_count
                
                # –ü—Ä–∞–≤–∏–ª—å–Ω–æ —Å—á–∏—Ç–∞–µ–º –ø–æ—Ä—Ç—ã –∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã {tcp: [...], udp: [...]}
                ports_data = parsed_data.get("ports", {})
                file_tcp_ports = 0
                file_udp_ports = 0
                
                if isinstance(ports_data, dict):
                    file_tcp_ports = len(ports_data.get("tcp", []))
                    file_udp_ports = len(ports_data.get("udp", []))
                elif isinstance(ports_data, list):
                    # Fallback –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
                    for port in ports_data:
                        if isinstance(port, dict):
                            protocol = port.get('protocol', '').upper()
                            if protocol == 'TCP':
                                file_tcp_ports += 1
                            elif protocol == 'UDP':
                                file_udp_ports += 1
                else:
                    # –ò—â–µ–º –≤ –ø—Ä—è–º—ã—Ö –ø–æ–ª—è—Ö
                    file_tcp_ports = parsed_data.get("tcp_ports_count", 0)
                    file_udp_ports = parsed_data.get("udp_ports_count", 0)
                
                file_total_ports = file_tcp_ports + file_udp_ports
                total_ports += file_total_ports
                
                # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ö–æ—Å—Ç—ã –∏–∑ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
                connections_data = parsed_data.get("connections", [])
                for conn in connections_data:
                    remote_addr = conn.get("remote_address", "")
                    if remote_addr and remote_addr != "*:*" and ":" in remote_addr:
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º IP –∏–∑ –∞–¥—Ä–µ—Å–∞ –≤–∏–¥–∞ "192.168.1.1:80"
                        remote_ip = remote_addr.split(":")[0]
                        if remote_ip and remote_ip not in ["*", "0.0.0.0", "127.0.0.1"]:
                            unique_hosts_set.add(remote_ip)
                
                # –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è–µ–º —É–¥–∞–ª–µ–Ω–Ω—ã–µ —Ö–æ—Å—Ç—ã –∏–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å–µ–∫—Ü–∏–∏
                remote_hosts_data = parsed_data.get("remote_hosts", [])
                for host in remote_hosts_data:
                    ip = host.get("ip_address", "") if isinstance(host, dict) else str(host)
                    if ip and ip not in ["*", "0.0.0.0", "127.0.0.1"]:
                        unique_hosts_set.add(ip)
                
                print(f"üîç [FALLBACK] {filename}: connections={connections_count}, TCP={file_tcp_ports}, UDP={file_udp_ports}, total_ports={file_total_ports}")
                
            except Exception as e:
                # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ {filename} –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
                continue
        
        unique_hosts_count = len(unique_hosts_set)
        
        print(f"üìä [FALLBACK] –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   üìä –û—Ç—á–µ—Ç–æ–≤: {total_reports}")
        print(f"   üîó –°–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {total_connections}")
        print(f"   üö™ –í—Å–µ–≥–æ –ø–æ—Ä—Ç–æ–≤: {total_ports}")
        print(f"   üåê –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ö–æ—Å—Ç–æ–≤: {unique_hosts_count}")
        
        return {
            "total_reports": total_reports,
            "total_connections": total_connections,
            "total_ports": total_ports,
            "unique_hosts": unique_hosts_count
        }
        
    except Exception as e:
        print(f"‚ùå [ERROR] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        import traceback
        print(f"‚ùå [ERROR] –¢—Ä–µ–π—Å: {traceback.format_exc()}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}"
        ) 