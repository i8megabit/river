# ========================================
# Docker Compose для продакшен деплоя на CentOS 9 (Podman Compose)
# Оптимизирован для производственного использования
# ========================================

version: '3.8'

services:
  # ========================================
  # База данных PostgreSQL
  # ========================================
  postgres:
    image: docker.io/postgres:15
    container_name: analyzer-postgres-prod
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-analyzer_db}
      POSTGRES_USER: ${POSTGRES_USER:-analyzer_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--auth-host=md5"
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - ./data/postgres:/var/lib/postgresql/data:Z
      - ./database/init:/docker-entrypoint-initdb.d:ro,Z
    ports:
      - "127.0.0.1:25432:5432"
    networks:
      - analyzer-network
    command: postgres -c 'max_connections=500' -c 'shared_buffers=512MB' -c 'effective_cache_size=2GB' -c 'work_mem=16MB' -c 'maintenance_work_mem=256MB'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-analyzer_user} -d ${POSTGRES_DB:-analyzer_db}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"
    security_opt:
      - label=disable
    tmpfs:
      - /tmp
      - /var/run/postgresql

  # ========================================
  # Redis для кэширования
  # ========================================
  redis:
    image: docker.io/redis:7-alpine
    container_name: analyzer-redis-prod
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 1gb --maxmemory-policy allkeys-lru --save 900 1 --save 300 10 --save 60 10000
    volumes:
      - ./data/redis:/data:Z
    ports:
      - "127.0.0.1:26379:6379"
    networks:
      - analyzer-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"
    security_opt:
      - label=disable

  # ========================================
  # FastAPI Backend
  # ========================================
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    image: analyzer-backend-prod:latest
    container_name: analyzer-backend-prod
    restart: unless-stopped
    environment:
      # Database
      POSTGRES_SERVER: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: ${POSTGRES_DB:-analyzer_db}
      POSTGRES_USER: ${POSTGRES_USER:-analyzer_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      
      # Redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      
      # Application
      ENVIRONMENT: production
      SECRET_KEY: ${SECRET_KEY}
      DEBUG: false
      
      # Server
      SERVER_HOST: 0.0.0.0
      SERVER_PORT: 8000
      
      # Logging
      LOG_LEVEL: INFO
      
      # Security
      ALLOWED_HOSTS: ${ALLOWED_HOSTS:-localhost,127.0.0.1}
    volumes:
      - ./data/uploads:/app/uploads:Z
      - ./logs:/app/logs:Z
    ports:
      - "127.0.0.1:28000:8000"
    networks:
      - analyzer-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 60s
      timeout: 30s
      retries: 3
      start_period: 120s
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "10"
    security_opt:
      - label=disable
    read_only: true
    tmpfs:
      - /tmp

  # ========================================
  # Frontend веб-интерфейс
  # ========================================
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    image: analyzer-frontend-prod:latest
    container_name: analyzer-frontend-prod
    restart: unless-stopped
    volumes:
      - ./logs:/var/log/nginx:Z
    ports:
      - "80:80"
      - "443:443"
    networks:
      - analyzer-network
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 60s
      timeout: 30s
      retries: 3
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "10"
    security_opt:
      - label=disable
    read_only: true
    tmpfs:
      - /tmp
      - /var/cache/nginx
      - /var/run

  # ========================================
  # Nginx Reverse Proxy (опционально для SSL)
  # ========================================
  nginx-proxy:
    image: docker.io/nginx:alpine
    container_name: analyzer-nginx-proxy
    restart: unless-stopped
    volumes:
      - ./config/nginx:/etc/nginx/conf.d:ro,Z
      - ./ssl:/etc/ssl/certs:ro,Z
      - ./logs:/var/log/nginx:Z
    ports:
      - "8080:80"
      - "8443:443"
    networks:
      - analyzer-network
    depends_on:
      - frontend
      - backend
    profiles:
      - proxy
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "10"
    security_opt:
      - label=disable

# ========================================
# Networks
# ========================================
networks:
  analyzer-network:
    driver: bridge
    name: analyzer-prod-network

# ========================================
# Volumes (используем bind mounts для лучшего контроля в production)
# ========================================
volumes: {} 